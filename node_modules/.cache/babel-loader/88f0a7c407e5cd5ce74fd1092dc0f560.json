{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport AuthCluster from './AuthCluster';\nimport MainPage from './pages/MainPage';\nimport AcctPage from './pages/AcctPage';\nimport ZooPage from './pages/ZooPage';\nimport Marketplace from './pages/Marketplace';\nimport MetaMintPage from './pages/MetaMintPage';\nimport NavBar from './pages/components/NavBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [auth, setAuth] = useState(false);\n\nconst checkAccount = async () => {\n  let snapshot = await fcl.currentUser().snapshot();\n  console.log(\"Snapshot: \" + snapshot);\n  let addrVal = await snapshot.addr;\n  console.log(\"addrVal: \" + addrVal);\n\n  if (addrVal != null) {\n    const encoded = await fcl.send([fcl.script`\n      import WildNFT from 0xProfile\n\n      pub fun main(addr: Address) : Bool {\n      let account = getAccount(0x6acb059f25fc7ba2)\n      let capability = account.getCapability(/public/AccessList) \n      let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n          ?? panic(\"Could not borrow account access list reference\")\n      let minterList = ref.getAccounts()\n\n      return minterList.contains(addr)\n    }       \n    `, fcl.args([fcl.arg(addrVal, t.Address)])]);\n    const decoded = await fcl.decode(encoded);\n    console.log(\"Decode: \" + decoded);\n    setAuth(decoded);\n  }\n};\n\nuseEffect(() => {\n  checkAccount();\n}, [auth]);\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      component: MainPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/Marketplace\",\n      component: Marketplace\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/AcctPage\",\n      render: props => /*#__PURE__*/_jsxDEV(AcctPage, {\n        globalStore: \"test\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 56\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/ZooPage\",\n      component: ZooPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/MetaMintPage\",\n      render: () => auth ? /*#__PURE__*/_jsxDEV(MetaMintPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 67\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 87\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Link","AuthCluster","MainPage","AcctPage","ZooPage","Marketplace","MetaMintPage","NavBar","auth","setAuth","checkAccount","snapshot","fcl","currentUser","console","log","addrVal","addr","encoded","send","script","args","arg","t","Address","decoded","decode","App","props"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport './App.css';\nimport AuthCluster from './AuthCluster';\nimport MainPage from './pages/MainPage';\nimport AcctPage from './pages/AcctPage';\nimport ZooPage from './pages/ZooPage';\nimport Marketplace from './pages/Marketplace';\nimport MetaMintPage from './pages/MetaMintPage';\nimport NavBar from './pages/components/NavBar';\n\nconst [auth, setAuth] = useState(false)\nconst checkAccount = async () => {\n  let snapshot = await fcl.currentUser().snapshot()\n  console.log(\"Snapshot: \" + snapshot)\n  let addrVal = await snapshot.addr\n  console.log(\"addrVal: \" + addrVal)\n  if(addrVal != null){\n  const encoded = await fcl\n    .send([\n      fcl.script`\n      import WildNFT from 0xProfile\n\n      pub fun main(addr: Address) : Bool {\n      let account = getAccount(0x6acb059f25fc7ba2)\n      let capability = account.getCapability(/public/AccessList) \n      let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n          ?? panic(\"Could not borrow account access list reference\")\n      let minterList = ref.getAccounts()\n\n      return minterList.contains(addr)\n    }       \n    `,fcl.args( \n      [fcl.arg(addrVal, t.Address)])\n    ])\n    const decoded = await fcl.decode(encoded)\n    console.log(\"Decode: \" + decoded)\n    setAuth(decoded)\n  }\n};\nuseEffect(() => {\ncheckAccount();\n}, [auth]);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Route exact path=\"/\" component={MainPage}></Route>\n      <Route exact path=\"/Marketplace\" component={Marketplace}></Route>\n      <Route exact path=\"/AcctPage\" render={(props) => <AcctPage globalStore={\"test\"} {...props} /> }></Route>\n      <Route exact path=\"/ZooPage\" component={ZooPage}></Route>\n      <Route exact path=\"/MetaMintPage\" render = {() => (auth ?  (<MetaMintPage/>) : (<Redirect to=\"/login\" />))}></Route>\n      \n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}