{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MintNFT.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MintNFT = () => {\n  _s();\n\n  const [nftInfo, setNftInfo] = useState(null);\n\n  const Mint = async () => {\n    const encoded = await fcl.send([fcl.transaction`\n        import DappState from 0xf8d6e0586b0a20c7\n\n        transaction {\n            // If the person executing this tx doesn't have access to the\n            // resource, then the tx will fail. Thus, references...\n            let receiverRef: &{DappState.NFTReceiver}\n            let minterRef: &DappState.NFTMinter\n        \n            // ...in \"prepare\", the code borrows capabilities on the two resources referenced above,\n            // takes in information of the person executing the tx, and validates.\n            prepare(acct: AuthAccount) {\n                self.receiverRef = acct.getCapability<&{DappState.NFTReceiver}>(/public/NFTReceiver)\n                    .borrow()\n                    ?? panic(\"Could not borrow minter reference.\")\n        \n                self.minterRef = acct.borrow<&DappState.NFTMinter>(from: /storage/DappStateMinter)\n                    ?? panic(\"Could not borrow minter reference.\")\n            }\n        \n            // Currently hardcoded metadata to an example Tweet. Next update will tackle automation of metadata insertion.\n            execute {\n                let metadata : {String : String} = {\n                    \"author\": \"sandiegozoo\",\n                    \"text\": \"So long Twitter crop\",\n                    \"lang\": \"eng\",\n                    \"date\": \"2021-04-27 22:19:41\",\n                    \"retweet_count\": \"165\",\n                    \"favorite_count\": \"1442\",\n                    \"id_str\": \"1390376068733804545\",\n                    // This field points to the IPFS CID hash that hosts the asset media file associated with this NFT! \n                    \"uri\": \"ipfs://QmPa8faoxcurmNwz9vyMPw129N76ifozNMCXLCPMVCbWXm\"\n                    // NOTE: \"ipfs://[CID]\" is the standard way to reference a file on IPFS.\n                }\n                // This is where the NFT resource itself is created\n                let newNFT <- self.minterRef.mintNFT()\n        \n                // This is where the metadata comes into the picture to join with the new NFT!\n                self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\n        \n                log(\"NFT has been minted and deposited to Account's Collection\")\n            }\n        }\n      `, fcl.payer(\"0xf8d6e0586b0a20c7\"), fcl.proposer(\"0xf8d6e0586b0a20c7\"), fcl.authorizations(\"0xf8d6e0586b0a20c7\")]);\n    const decoded = await fcl.decode(encoded);\n    setNftInfo(decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: fetchTokenData,\n        children: \"Mint NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintNFT, \"jmGmpsNxFqySt4MoVmikJI7nO/4=\");\n\n_c = MintNFT;\nexport default MintNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintNFT\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MintNFT.js"],"names":["React","useState","fcl","t","MintNFT","nftInfo","setNftInfo","Mint","encoded","send","transaction","payer","proposer","authorizations","decoded","decode","fetchTokenData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMM,IAAI,GAAG,YAAY;AACvB,UAAMC,OAAO,GAAG,MAAMN,GAAG,CACtBO,IADmB,CACd,CACJP,GAAG,CAACQ,WAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA5CY,EA6CNR,GAAG,CAACS,KAAJ,CAAU,oBAAV,CA7CM,EA8CNT,GAAG,CAACU,QAAJ,CAAa,oBAAb,CA9CM,EA+CNV,GAAG,CAACW,cAAJ,CAAmB,oBAAnB,CA/CM,CADc,CAAtB;AAkDA,UAAMC,OAAO,GAAG,MAAMZ,GAAG,CAACa,MAAJ,CAAWP,OAAX,CAAtB;AACAF,IAAAA,UAAU,CAACQ,OAAD,CAAV;AACD,GArDD;;AAsDA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEE,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA/DD;;GAAMZ,O;;KAAAA,O;AAiEN,eAAeA,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\"\n\nconst MintNFT = () => {\n  const [nftInfo, setNftInfo] = useState(null)\n  const Mint = async () => {\n    const encoded = await fcl\n      .send([\n        fcl.transaction`\n        import DappState from 0xf8d6e0586b0a20c7\n\n        transaction {\n            // If the person executing this tx doesn't have access to the\n            // resource, then the tx will fail. Thus, references...\n            let receiverRef: &{DappState.NFTReceiver}\n            let minterRef: &DappState.NFTMinter\n        \n            // ...in \"prepare\", the code borrows capabilities on the two resources referenced above,\n            // takes in information of the person executing the tx, and validates.\n            prepare(acct: AuthAccount) {\n                self.receiverRef = acct.getCapability<&{DappState.NFTReceiver}>(/public/NFTReceiver)\n                    .borrow()\n                    ?? panic(\"Could not borrow minter reference.\")\n        \n                self.minterRef = acct.borrow<&DappState.NFTMinter>(from: /storage/DappStateMinter)\n                    ?? panic(\"Could not borrow minter reference.\")\n            }\n        \n            // Currently hardcoded metadata to an example Tweet. Next update will tackle automation of metadata insertion.\n            execute {\n                let metadata : {String : String} = {\n                    \"author\": \"sandiegozoo\",\n                    \"text\": \"So long Twitter crop\",\n                    \"lang\": \"eng\",\n                    \"date\": \"2021-04-27 22:19:41\",\n                    \"retweet_count\": \"165\",\n                    \"favorite_count\": \"1442\",\n                    \"id_str\": \"1390376068733804545\",\n                    // This field points to the IPFS CID hash that hosts the asset media file associated with this NFT! \n                    \"uri\": \"ipfs://QmPa8faoxcurmNwz9vyMPw129N76ifozNMCXLCPMVCbWXm\"\n                    // NOTE: \"ipfs://[CID]\" is the standard way to reference a file on IPFS.\n                }\n                // This is where the NFT resource itself is created\n                let newNFT <- self.minterRef.mintNFT()\n        \n                // This is where the metadata comes into the picture to join with the new NFT!\n                self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\n        \n                log(\"NFT has been minted and deposited to Account's Collection\")\n            }\n        }\n      `,\n      fcl.payer(\"0xf8d6e0586b0a20c7\"),\n      fcl.proposer(\"0xf8d6e0586b0a20c7\"),\n      fcl.authorizations(\"0xf8d6e0586b0a20c7\")])\n    \n    const decoded = await fcl.decode(encoded)\n    setNftInfo(decoded)\n  };\n  return (\n    <div className=\"mint-nft\">\n      <div className=\"center\">\n        <button className=\"btn-primary\" onClick={fetchTokenData}>Mint NFT</button>        \n      </div>\n    </div>\n  );\n};\n\nexport default MintNFT;"]},"metadata":{},"sourceType":"module"}