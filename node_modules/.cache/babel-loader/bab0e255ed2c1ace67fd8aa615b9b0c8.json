{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayZooGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayZooGrid = props => {\n  _s();\n\n  console.log(\"Prop Account Info: \" + props.account);\n  const [nftInfo, setNftInfo] = useState(\"\");\n\n  const display = async () => {\n    const encoded = await fcl.send([fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address) : [String?] {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n\n          var URIs: [String?] = []\n          let ids = receiverRef.getIDs()\n          for element in ids {\n            let data = receiverRef.getMetadata(id: element)\n            URIs.append(data[\"uri\"])\n          }\n          return URIs\n      }       \n      `, fcl.args([fcl.arg(props.account, t.Address)])]);\n    const decoded = await fcl.decode(encoded);\n    console.log(\"Decode: \" + decoded);\n    setNftInfo(decoded);\n  };\n\n  function showImg(s, rowCt) {\n    let arr = s.split(\"ipfs://\");\n\n    if (s.split(\"ipfs://\").length === 2) {\n      let link = \"https://ipfs.io/ipfs/\" + arr[1];\n      console.log(link);\n\n      if (rowCt === 3) {\n        return /*#__PURE__*/_jsxDEV(\"br\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"gridIcon\",\n            src: link,\n            alt: \"Giraffe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 20\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 16\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"gridIcon\",\n        src: link,\n        alt: \"Giraffe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-ids\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: display,\n        children: \"Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), nftInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", Object.keys(nftInfo).map(k => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"column\",\n            children: [k, \":\", showImg(nftInfo[k], k % 3)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setNftInfo(null),\n          className: \"btn-secondary\",\n          children: \"Clear Grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DisplayZooGrid, \"vw9EdGMLELCn6b2siM8YhsQy9m0=\");\n\n_c = DisplayZooGrid;\nexport default DisplayZooGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayZooGrid\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayZooGrid.js"],"names":["React","useState","fcl","t","DisplayZooGrid","props","console","log","account","nftInfo","setNftInfo","display","encoded","send","script","args","arg","Address","decoded","decode","showImg","s","rowCt","arr","split","length","link","Object","keys","map","k"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\n\nconst DisplayZooGrid = (props) => {\n  console.log(\"Prop Account Info: \" + props.account)\n  const [nftInfo, setNftInfo] = useState(\"\")\n  const display = async () => {\n\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address) : [String?] {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n\n          var URIs: [String?] = []\n          let ids = receiverRef.getIDs()\n          for element in ids {\n            let data = receiverRef.getMetadata(id: element)\n            URIs.append(data[\"uri\"])\n          }\n          return URIs\n      }       \n      `,\n      fcl.args( \n        [fcl.arg(props.account, t.Address)]\n        )\n      ])\n    const decoded = await fcl.decode(encoded)\n    console.log(\"Decode: \" + decoded)\n    setNftInfo(decoded)\n  };\n\n  function showImg(s, rowCt) {\n    let arr = s.split(\"ipfs://\");\n    if(s.split(\"ipfs://\").length === 2){\n      let link = \"https://ipfs.io/ipfs/\"+arr[1];\n      console.log(link)\n      if(rowCt === 3){\n        return <br><img id=\"gridIcon\" src={link} alt=\"Giraffe\"></img></br>\n      }\n      return <img id=\"gridIcon\" src={link} alt=\"Giraffe\"></img>\n    }   \n  }\n  return (\n    <div className=\"nft-ids\">\n    <div className=\"center\">\n        <button className=\"btn-primary\" onClick={display}>Grid</button> \n        {\n            nftInfo &&\n            <div> {\n            Object.keys(nftInfo).map(k => {\n              return (\n                <div class=\"column\">{k}: \n                    {showImg(nftInfo[k], k%3)}\n                </div>\n              )\n            })}\n            <button onClick={() => setNftInfo(null)} className=\"btn-secondary\">Clear Grid</button>\n            </div>\n        }       \n    </div>\n    </div>\n  );\n};\n\nexport default DisplayZooGrid;"]},"metadata":{},"sourceType":"module"}