{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayEvents.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\"; // Mainnet Access Node\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst node = \"http://localhost:8080\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\";\nconst FETCH_INTERVAL = 5000; // since last block returned is not sealed\n// we will go back a bit back in time\n\nconst SHIFT = 0;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n\n  return _union;\n}\n\nexport default function DisplayEvents() {\n  _s();\n\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n\n  const fetchEvents = async () => {\n    const latestBlock = await sdk.send(await sdk.build([sdk.getLatestBlock()]), {\n      node\n    });\n    const height = latestBlock.block.height - SHIFT;\n    let end = height;\n    let start = lastBlock;\n\n    if (lastBlock === 0) {\n      start = height;\n    } // fetch events\n\n\n    const response = await sdk.send(await sdk.build([sdk.getEvents(EVENT_MOMENT_LISTED, start, end)]), {\n      node\n    });\n    const {\n      events\n    } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(events.map(event => {\n        const id = event.payload.value.fields[0].value.value;\n        eventsDictionary[id] = event;\n        return id;\n      }));\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    } // update last processed block\n\n\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(fetchEvents, FETCH_INTERVAL);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n  const events = Array.from(eventIDs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Marketplace\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latest processed block: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"#\", lastBlock]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Events found: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: events.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      align: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            align: \"left\",\n            children: \"Moment ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            align: \"right\",\n            children: \"Seller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            align: \"right\",\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: events.map(eventId => {\n          const event = eventsDictionary[eventId];\n          const payload = event.payload.value.fields;\n          const [id, price] = payload;\n          const momentId = id.value.value;\n          const momentPrice = price.value.value;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"left\",\n              children: [\"#\", momentId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"right\",\n              children: [\"#\", momentSeller]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"right\",\n              children: [\"#\", momentPrice]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DisplayEvents, \"Fc8Re4wTqNoH+abffBDvr6XAv6I=\");\n\n_c = DisplayEvents;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayEvents\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayEvents.js"],"names":["React","useEffect","useState","sdk","node","EVENT_MOMENT_LISTED","FETCH_INTERVAL","SHIFT","union","setA","setB","_union","Set","elem","add","DisplayEvents","lastBlock","setLastBlock","eventIDs","setEventIdS","eventsDictionary","setEventsDictionary","fetchEvents","latestBlock","send","build","getLatestBlock","height","block","end","start","response","getEvents","events","length","newSet","map","event","id","payload","value","fields","newEvents","interval","setInterval","clearInterval","Array","from","eventId","price","momentId","momentPrice","momentSeller"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\n\n// Mainnet Access Node\nconst node = \"http://localhost:8080\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\";\nconst FETCH_INTERVAL = 5000;\n\n// since last block returned is not sealed\n// we will go back a bit back in time\nconst SHIFT = 0;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nexport default function DisplayEvents() {\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n\n  const fetchEvents = async () => {\n    const latestBlock = await sdk.send(\n      await sdk.build([sdk.getLatestBlock()]),\n      {\n        node\n      }\n    );\n\n    const height = latestBlock.block.height - SHIFT;\n    let end = height;\n    let start = lastBlock;\n    if (lastBlock === 0) {\n      start = height;\n    }\n\n    // fetch events\n    const response = await sdk.send(\n      await sdk.build([sdk.getEvents(EVENT_MOMENT_LISTED, start, end)]),\n      { node }\n    );\n\n    const { events } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(\n        events.map((event) => {\n          const id = event.payload.value.fields[0].value.value;\n          eventsDictionary[id] = event;\n          return id;\n        })\n      );\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    }\n\n    // update last processed block\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(fetchEvents, FETCH_INTERVAL);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  const events = Array.from(eventIDs);\n\n  return (\n    <div className=\"Marketplace\">\n      <p>\n        Latest processed block: <b>#{lastBlock}</b>\n      </p>\n      <p>\n        Events found: <b>{events.length}</b>\n      </p>\n      <table align=\"center\">\n        <thead>\n          <tr>\n            <th align=\"left\">Moment ID</th>\n            <th align=\"right\">Seller</th>\n            <th align=\"right\">Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {events.map((eventId) => {\n            const event = eventsDictionary[eventId];\n            const payload = event.payload.value.fields;\n            const [id, price] = payload;\n            const momentId = id.value.value;\n            const momentPrice = price.value.value;\n            return (\n              <tr>\n                <td align=\"left\">#{momentId}</td>\n                <td align=\"right\">#{momentSeller}</td>\n                <td align=\"right\">#{momentPrice}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}