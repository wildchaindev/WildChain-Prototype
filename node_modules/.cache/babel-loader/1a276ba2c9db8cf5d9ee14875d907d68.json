{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayMintPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayMintPage = () => {\n  _s();\n\n  const [mintUsers, setMintUsers] = useState(false);\n\n  const checkAccount = async () => {\n    let snapshot = await fcl.currentUser().snapshot();\n    console.log(\"Snapshot: \" + snapshot);\n    let addrVal = await snapshot.addr;\n    console.log(\"addrVal: \" + addrVal);\n\n    if (addrVal != null) {\n      const encoded = await fcl.send([fcl.script`\n        import WildNFT from 0xProfile\n\n        pub fun main(addr: String) : Bool {\n        let account = getAccount(0xe8641581fae7d893)\n        let capability = account.getCapability(/public/AccessList) \n        let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n            ?? panic(\"Could not borrow account access list reference\")\n        let minterList = ref.getAccounts()\n\n        return minterList.contains(addr)\n      }       \n      `, fcl.args([fcl.arg(addrVal, t.String)])]);\n      const decoded = await fcl.decode(encoded);\n      console.log(\"Decode: \" + decoded);\n      setMintUsers(decoded);\n    }\n  };\n\n  checkAccount();\n\n  if (mintUsers) {\n    console.log(\"User Approved\");\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/MetaMintPage\",\n        children: \"Mint an NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(DisplayMintPage, \"J7/R0L+Vqn8LYhp4Nd1VdxyXyIg=\");\n\n_c = DisplayMintPage;\nexport default DisplayMintPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMintPage\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayMintPage.js"],"names":["React","useState","fcl","t","Link","DisplayMintPage","mintUsers","setMintUsers","checkAccount","snapshot","currentUser","console","log","addrVal","addr","encoded","send","script","args","arg","String","decoded","decode"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMO,YAAY,GAAG,YAAY;AAC7B,QAAIC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,WAAJ,GAAkBD,QAAlB,EAArB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeH,QAA3B;AACA,QAAII,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAA7B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,OAA1B;;AACA,QAAGA,OAAO,IAAI,IAAd,EAAmB;AACnB,YAAME,OAAO,GAAG,MAAMb,GAAG,CACtBc,IADmB,CACd,CACJd,GAAG,CAACe,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAbY,EAaJf,GAAG,CAACgB,IAAJ,CACA,CAAChB,GAAG,CAACiB,GAAJ,CAAQN,OAAR,EAAiBV,CAAC,CAACiB,MAAnB,CAAD,CADA,CAbI,CADc,CAAtB;AAiBE,YAAMC,OAAO,GAAG,MAAMnB,GAAG,CAACoB,MAAJ,CAAWP,OAAX,CAAtB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaS,OAAzB;AACAd,MAAAA,YAAY,CAACc,OAAD,CAAZ;AACD;AACJ,GA3BD;;AA4BAb,EAAAA,YAAY;;AACZ,MAAGF,SAAH,EAAa;AACXK,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,wBACE;AAAA,6BAAI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GALD,MAMI;AACF,WAAO,IAAP;AACD;AACA,CAzCD;;GAAMP,e;;KAAAA,e;AA2CN,eAAeA,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport {Link} from 'react-router-dom';\n\nconst DisplayMintPage = () => {\nconst [mintUsers, setMintUsers] = useState(false)\n\nconst checkAccount = async () => {\n    let snapshot = await fcl.currentUser().snapshot()\n    console.log(\"Snapshot: \" + snapshot)\n    let addrVal = await snapshot.addr\n    console.log(\"addrVal: \" + addrVal)\n    if(addrVal != null){\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import WildNFT from 0xProfile\n\n        pub fun main(addr: String) : Bool {\n        let account = getAccount(0xe8641581fae7d893)\n        let capability = account.getCapability(/public/AccessList) \n        let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n            ?? panic(\"Could not borrow account access list reference\")\n        let minterList = ref.getAccounts()\n\n        return minterList.contains(addr)\n      }       \n      `,fcl.args( \n        [fcl.arg(addrVal, t.String)])\n      ])\n      const decoded = await fcl.decode(encoded)\n      console.log(\"Decode: \" + decoded)\n      setMintUsers(decoded)\n    }\n};\ncheckAccount();\nif(mintUsers){\n  console.log(\"User Approved\")\n  return (\n    <li><Link to=\"/MetaMintPage\">Mint an NFT</Link></li>\n  )\n}\nelse{\n  return null\n}\n};\n\nexport default DisplayMintPage;"]},"metadata":{},"sourceType":"module"}