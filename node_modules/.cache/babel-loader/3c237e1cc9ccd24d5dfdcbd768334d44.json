{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MintNFT.js\";\n//import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MintNFT = () => {\n  //const [nftInfo, setNftInfo] = useState(null)\n  const Mint = async () => {\n    const encoded = await fcl.send([fcl.transaction`\n        import DappState from 0xProfile\n\n        transaction {\n            // If the person executing this tx doesn't have access to the\n            // resource, then the tx will fail. Thus, references...\n            let receiverRef: &{DappState.NFTReceiver}\n            let minterRef: &DappState.NFTMinter\n        \n            // ...in \"prepare\", the code borrows capabilities on the two resources referenced above,\n            // takes in information of the person executing the tx, and validates.\n            prepare(acct: AuthAccount) {\n                self.receiverRef = acct.getCapability<&{DappState.NFTReceiver}>(/public/NFTReceiver)\n                    .borrow()\n                    ?? panic(\"Could not borrow receiver reference.\")\n        \n                self.minterRef = acct.borrow<&DappState.NFTMinter>(from: /storage/DappStateMinter)\n                    ?? panic(\"Could not borrow minter reference.\")\n            }\n        \n            // Currently hardcoded metadata to an example Tweet. Next update will tackle automation of metadata insertion.\n            execute {\n                let metadata : {String : String} = {\n                    \"author\": \"sandiegozoo\",\n                    \"text\": \"So long Twitter crop\",\n                    \"lang\": \"eng\",\n                    \"date\": \"2021-04-27 22:19:41\",\n                    \"retweet_count\": \"165\",\n                    \"favorite_count\": \"1442\",\n                    \"id_str\": \"1390376068733804545\",\n                    // This field points to the IPFS CID hash that hosts the asset media file associated with this NFT! \n                    \"uri\": \"ipfs://QmPa8faoxcurmNwz9vyMPw129N76ifozNMCXLCPMVCbWXm/sandiegodisgruntledgiraffe.jpeg\"\n                    // NOTE: \"ipfs://[CID]\" is the standard way to reference a file on IPFS.\n                }\n                // This is where the NFT resource itself is created\n                let newNFT <- self.minterRef.mintNFT()\n        \n                // This is where the metadata comes into the picture to join with the new NFT!\n                self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\n        \n                log(\"NFT has been minted and deposited to Account's Collection\")\n            }\n        }\n      `, fcl.proposer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.payer(fcl.authz)]);\n    const decoded = await fcl.decode(encoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fancy\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: Mint,\n            children: \"Mint NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MintNFT;\nexport default MintNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintNFT\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MintNFT.js"],"names":["fcl","MintNFT","Mint","encoded","send","transaction","proposer","authz","authorizations","payer","decoded","decode"],"mappings":";AAAA;AACA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB;AACA,QAAMC,IAAI,GAAG,YAAY;AACvB,UAAMC,OAAO,GAAG,MAAMH,GAAG,CACtBI,IADmB,CACd,CACJJ,GAAG,CAACK,WAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA5CY,EA6CNL,GAAG,CAACM,QAAJ,CAAaN,GAAG,CAACO,KAAjB,CA7CM,EA8CNP,GAAG,CAACQ,cAAJ,CAAmB,CAACR,GAAG,CAACO,KAAL,CAAnB,CA9CM,EA+CNP,GAAG,CAACS,KAAJ,CAAUT,GAAG,CAACO,KAAd,CA/CM,CADc,CAAtB;AAoDA,UAAMG,OAAO,GAAG,MAAMV,GAAG,CAACW,MAAJ,CAAWR,OAAX,CAAtB;AACD,GAtDD;;AAuDA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,iCACI;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAgC,YAAA,OAAO,EAAED,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CApED;;KAAMD,O;AAsEN,eAAeA,OAAf","sourcesContent":["//import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\n\nconst MintNFT = () => {\n  //const [nftInfo, setNftInfo] = useState(null)\n  const Mint = async () => {\n    const encoded = await fcl\n      .send([\n        fcl.transaction`\n        import DappState from 0xProfile\n\n        transaction {\n            // If the person executing this tx doesn't have access to the\n            // resource, then the tx will fail. Thus, references...\n            let receiverRef: &{DappState.NFTReceiver}\n            let minterRef: &DappState.NFTMinter\n        \n            // ...in \"prepare\", the code borrows capabilities on the two resources referenced above,\n            // takes in information of the person executing the tx, and validates.\n            prepare(acct: AuthAccount) {\n                self.receiverRef = acct.getCapability<&{DappState.NFTReceiver}>(/public/NFTReceiver)\n                    .borrow()\n                    ?? panic(\"Could not borrow receiver reference.\")\n        \n                self.minterRef = acct.borrow<&DappState.NFTMinter>(from: /storage/DappStateMinter)\n                    ?? panic(\"Could not borrow minter reference.\")\n            }\n        \n            // Currently hardcoded metadata to an example Tweet. Next update will tackle automation of metadata insertion.\n            execute {\n                let metadata : {String : String} = {\n                    \"author\": \"sandiegozoo\",\n                    \"text\": \"So long Twitter crop\",\n                    \"lang\": \"eng\",\n                    \"date\": \"2021-04-27 22:19:41\",\n                    \"retweet_count\": \"165\",\n                    \"favorite_count\": \"1442\",\n                    \"id_str\": \"1390376068733804545\",\n                    // This field points to the IPFS CID hash that hosts the asset media file associated with this NFT! \n                    \"uri\": \"ipfs://QmPa8faoxcurmNwz9vyMPw129N76ifozNMCXLCPMVCbWXm/sandiegodisgruntledgiraffe.jpeg\"\n                    // NOTE: \"ipfs://[CID]\" is the standard way to reference a file on IPFS.\n                }\n                // This is where the NFT resource itself is created\n                let newNFT <- self.minterRef.mintNFT()\n        \n                // This is where the metadata comes into the picture to join with the new NFT!\n                self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\n        \n                log(\"NFT has been minted and deposited to Account's Collection\")\n            }\n        }\n      `,\n      fcl.proposer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.payer(fcl.authz)\n    ]\n    )\n    \n    const decoded = await fcl.decode(encoded)\n  };\n  return (\n    <div className=\"mint-nft\">\n        <div className=\"center\">\n        <div className=\"fancy\">\n        <div className=\"center\">\n            <button className=\"btn-primary\" onClick={Mint}>Mint NFT</button>        \n        </div>\n        </div>\n        </div>\n    </div>\n  );\n};\n\nexport default MintNFT;"]},"metadata":{},"sourceType":"module"}