{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/GetIDs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GetIDs = () => {\n  _s();\n\n  const [nftInfo, setNftInfo] = useState(null);\n\n  const fetchTokenData = async () => {\n    const encoded = await fcl.send([fcl.script`\n        \n        import DappState from 0xf8d6e0586b0a20c7\n\n        pub fun main(account: Address) : [UInt64]?{\n\n        // Get both public account objects\n        let account1 = getAccount(account)\n\n        // Find the public Receiver capability for their Collections\n        let acct1Capability = account1.getCapability(/public/NFTReceiver)\n\n        // borrow references from the capabilities\n        let receiver1Ref = acct1Capability.borrow<&{DappState.NFTReceiver}>()\n            ?? panic(\"Could not borrow account 1 receiver reference\")\n\n        // Print both collections as arrays of IDs\n        return receiver1Ref.getIDs()\n        }          \n      `, fcl.args([fcl.arg(\"0xf8d6e0586b0a20c7\", t.Address)])]);\n    const decoded = await fcl.decode(encoded);\n    setNftInfo(decoded); //console.log(nftInfo)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-ids\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: fetchTokenData,\n        children: \"Get NFT IDs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), nftInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Object.keys(nftInfo).map(k => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [k, \": \", nftInfo[k]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNftInfo(null),\n        className: \"btn-secondary\",\n        children: \"Clear ID Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GetIDs, \"jmGmpsNxFqySt4MoVmikJI7nO/4=\");\n\n_c = GetIDs;\nexport default GetIDs;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetIDs\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/GetIDs.js"],"names":["React","useState","fcl","t","GetIDs","nftInfo","setNftInfo","fetchTokenData","encoded","send","script","args","arg","Address","decoded","decode","Object","keys","map","k"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMM,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAG,MAAMN,GAAG,CACtBO,IADmB,CACd,CACJP,GAAG,CAACQ,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OApBY,EAqBNR,GAAG,CAACS,IAAJ,CAAU,CAACT,GAAG,CAACU,GAAJ,CAAQ,oBAAR,EAA8BT,CAAC,CAACU,OAAhC,CAAD,CAAV,CArBM,CADc,CAAtB;AAyBA,UAAMC,OAAO,GAAG,MAAMZ,GAAG,CAACa,MAAJ,CAAWP,OAAX,CAAtB;AACAF,IAAAA,UAAU,CAACQ,OAAD,CAAV,CA3BiC,CA4BjC;AACD,GA7BD;;AA8BA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEP,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAKIF,OAAO,iBACP;AAAA,iBAEIW,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqBa,GAArB,CAAyBC,CAAC,IAAI;AAC5B,4BACE;AAAA,qBAAIA,CAAJ,QAASd,OAAO,CAACc,CAAD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAGD,OAJD,CAFJ,eAQE;AAAQ,QAAA,OAAO,EAAE,MAAMb,UAAU,CAAC,IAAD,CAAjC;AAAyC,QAAA,SAAS,EAAC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CApDD;;GAAMF,M;;KAAAA,M;AAsDN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\n\nconst GetIDs = () => {\n  const [nftInfo, setNftInfo] = useState(null)\n  const fetchTokenData = async () => {\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        \n        import DappState from 0xf8d6e0586b0a20c7\n\n        pub fun main(account: Address) : [UInt64]?{\n\n        // Get both public account objects\n        let account1 = getAccount(account)\n\n        // Find the public Receiver capability for their Collections\n        let acct1Capability = account1.getCapability(/public/NFTReceiver)\n\n        // borrow references from the capabilities\n        let receiver1Ref = acct1Capability.borrow<&{DappState.NFTReceiver}>()\n            ?? panic(\"Could not borrow account 1 receiver reference\")\n\n        // Print both collections as arrays of IDs\n        return receiver1Ref.getIDs()\n        }          \n      `,\n      fcl.args( [fcl.arg(\"0xf8d6e0586b0a20c7\", t.Address)] )\n      ])\n    \n    const decoded = await fcl.decode(encoded)\n    setNftInfo(decoded)\n    //console.log(nftInfo)\n  };\n  return (\n    <div className=\"nft-ids\">\n      <div className=\"center\">\n        <button className=\"btn-primary\" onClick={fetchTokenData}>Get NFT IDs</button>        \n      </div>\n      {\n        nftInfo &&\n        <div>\n          {\n            Object.keys(nftInfo).map(k => {\n              return (\n                <p>{k}: {nftInfo[k]}</p>\n              )\n            })\n          }\n          <button onClick={() => setNftInfo(null)} className=\"btn-secondary\">Clear ID Info</button>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default GetIDs;"]},"metadata":{},"sourceType":"module"}