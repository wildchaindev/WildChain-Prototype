{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport Modal from 'react-modal';\nimport TokenDataMarketTest from \"./TokenDataMarketTest\"; // Mainnet Access Node\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst node = \"https://access-testnet.onflow.org\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\";\nconst FETCH_INTERVAL = 1000; // since last block returned is not sealed\n// we will go back a bit back in time\n\nvar SHIFT = 200;\nlet isSealed = false;\nlet displayAmount = 2;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n\n  return _union;\n}\n\nexport default function MarketGrid() {\n  _s();\n\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n  var displaySeller = \"\";\n  var displayPrice = \"\";\n  Modal.setAppElement(document.getElementById('marketplace'));\n\n  function openModal(eventId, seller, price) {\n    console.log(eventId);\n    console.log(seller);\n    console.log(price);\n    displaySeller = seller;\n    displayPrice = price;\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {// references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const fetchEvents = async heihgt => {\n    if (height == 0) {\n      const latestBlock = await sdk.send(await sdk.build([sdk.getBlock(isSealed)]), {\n        node\n      }); //console.log(latestBlock);\n\n      height = latestBlock.block.height;\n    }\n\n    let end = height;\n    let start = height - SHIFT; // fetch events\n\n    const response = await sdk.send(await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]), {\n      node\n    });\n    const {\n      events\n    } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(events.map(event => {\n        const id = event.payload.value.fields[0].value.value;\n        eventsDictionary[id] = event;\n        return id;\n      }));\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    } // update last processed block\n\n\n    setLastBlock(start);\n  };\n\n  useEffect(() => {\n    if (Object.keys(eventsDictionary).length < displayAmount) {\n      const interval = setInterval(fetchEvents(lastBlock), FETCH_INTERVAL);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  });\n  const events = Array.from(eventIDs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"marketplace\",\n    className: \"Marketplace\",\n    children: [console.log(\"Memory Test\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: events.map(eventId => {\n        const event = eventsDictionary[eventId];\n        const payload = event.payload.value.fields;\n        const [id, price, seller] = payload;\n        const nftId = id.value.value;\n        const nftPrice = price.value.value; //console.log(nftPrice);\n\n        const nftSeller = seller.value.value.value;\n\n        const nftMetadata = /*#__PURE__*/_jsxDEV(TokenDataMarketTest, {\n          account: nftSeller,\n          nftID: nftId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 33\n        }, this);\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => openModal(eventId, nftSeller, nftPrice),\n            children: [nftMetadata, nftSeller, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 28\n            }, this), nftPrice]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            isOpen: modalIsOpen,\n            onAfterOpen: afterOpenModal,\n            onRequestClose: closeModal,\n            contentLabel: \"Example Modal\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"NFT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: closeModal,\n              children: \"close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [nftMetadata, console.log(eventId), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"column\",\n                children: [\"Seller: \", nftSeller, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 21\n                }, this), \"Price: \", nftPrice]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketGrid, \"gSNd8arp6+XVFPJn6ghfrXwkR4c=\");\n\n_c = MarketGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketGrid\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js"],"names":["React","useEffect","useState","sdk","Modal","TokenDataMarketTest","node","EVENT_MOMENT_LISTED","FETCH_INTERVAL","SHIFT","isSealed","displayAmount","union","setA","setB","_union","Set","elem","add","MarketGrid","lastBlock","setLastBlock","eventIDs","setEventIdS","eventsDictionary","setEventsDictionary","modalIsOpen","setIsOpen","displaySeller","displayPrice","setAppElement","document","getElementById","openModal","eventId","seller","price","console","log","afterOpenModal","closeModal","fetchEvents","heihgt","height","latestBlock","send","build","getBlock","block","end","start","response","getEventsAtBlockHeightRange","events","length","newSet","map","event","id","payload","value","fields","newEvents","Object","keys","interval","setInterval","clearInterval","Array","from","nftId","nftPrice","nftSeller","nftMetadata"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport Modal from 'react-modal';\nimport TokenDataMarketTest from \"./TokenDataMarketTest\";\n\n// Mainnet Access Node\nconst node = \"https://access-testnet.onflow.org\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\";\nconst FETCH_INTERVAL = 1000;\n\n// since last block returned is not sealed\n// we will go back a bit back in time\nvar SHIFT = 200;\nlet isSealed = false;\nlet displayAmount = 2;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nexport default function MarketGrid() {\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n  var displaySeller = \"\"\n  var displayPrice = \"\"\n\n  Modal.setAppElement(document.getElementById('marketplace'));\n\n  function openModal(eventId, seller, price) {\n    console.log(eventId);\n    console.log(seller);\n    console.log(price);\n    displaySeller = seller;\n    displayPrice = price;\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const fetchEvents = async (heihgt) => {\n    if (height == 0) {\n      const latestBlock = await sdk.send(\n        await sdk.build([sdk.getBlock(isSealed)]),\n        {\n          node\n        }\n      );\n      //console.log(latestBlock);\n      height = latestBlock.block.height;\n    }\n    let end = height;\n    let start = height-SHIFT;\n\n    // fetch events\n    const response = await sdk.send(\n      await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]),\n      { node }\n    );\n\n    const { events } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(\n        events.map((event) => {\n          const id = event.payload.value.fields[0].value.value;\n          eventsDictionary[id] = event;\n          return id;\n        })\n      );\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    }\n\n    // update last processed block\n    setLastBlock(start);\n  };\n\n  useEffect(() => {\n    if(Object.keys(eventsDictionary).length < displayAmount){\n      const interval = setInterval(fetchEvents(lastBlock), FETCH_INTERVAL);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  });\n\n  const events = Array.from(eventIDs);\n\n  return (\n    \n    <div id=\"marketplace\" className=\"Marketplace\">\n      {console.log(\"Memory Test\")}\n      <div className=\"center\">\n      {events.map((eventId) => {\n            const event = eventsDictionary[eventId];\n            const payload = event.payload.value.fields;\n            const [id, price, seller] = payload;\n            const nftId = id.value.value;\n            const nftPrice = price.value.value;\n            //console.log(nftPrice);\n            const nftSeller = seller.value.value.value;\n            const nftMetadata = <TokenDataMarketTest account={nftSeller} nftID={nftId}></TokenDataMarketTest>\n            return (\n              <div className=\"column\"><button onClick={() => openModal(eventId,nftSeller,nftPrice)}>\n                {nftMetadata}\n                {nftSeller}<br/>\n                {nftPrice}\n              </button>\n              <Modal\n                isOpen={modalIsOpen}\n                onAfterOpen={afterOpenModal}\n                onRequestClose={closeModal}\n                contentLabel=\"Example Modal\"\n              >\n                <h2>NFT</h2>\n                <button onClick={closeModal}>close</button>\n                <div>\n                  {nftMetadata}\n                  {console.log(eventId)}\n                  <div className=\"column\">\n                    Seller: {nftSeller}\n                    <br/>\n                    Price: {nftPrice}\n                  </div>\n                </div>\n              </Modal></div>\n            );\n          })}\n      </div>     \n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}