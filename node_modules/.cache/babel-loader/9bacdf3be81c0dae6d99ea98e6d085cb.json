{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenData = () => {\n  _s();\n\n  const [nftInfo, setNftInfo] = useState(null); // Using this function for displaying ipfs content\n\n  function showImg(s) {\n    let arr = s.split(\"ipfs://\");\n    console.log(arr);\n\n    if (s.split(\"ipfs://\").length === 2) {\n      let link = \"https://ipfs.io/ipfs/\" + arr[1];\n      console.log(link); //console.log(\"Data Type: \" + typeof(fcl.authz()));\n      //let testVal = (await fcl.authz());\n      //console.log(testVal);\n\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"icon\",\n        src: link,\n        alt: \"Giraffe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  const fetchTokenData = async () => {\n    //console.log(\"Metadata ID: \" + document.getElementById(\"nftIDMeta\").value)\n    document.getElementById(\"nftIDMeta\").value;\n    let testVal = await fcl.authz();\n    console.log(\"TestVal: \" + (await testVal.addr));\n    let addrVal = testVal.addr;\n    console.log(\"addrVal: \" + addrVal);\n    const encoded = await fcl.send([fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address, nftId: UInt64) : {String : String} {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n          return receiverRef.getMetadata(id: nftId)\n      }       \n      `, fcl.args([fcl.arg(\"0x\" + addrVal, t.Address), fcl.arg(3, t.UInt64)])]);\n    console.log(\"Data Type: \" + typeof fcl.authz()); //console.log(fcl.authz().addr)\n    //let testVal = await fcl.authz()\n    //console.log(\"TestVal: \" + await testVal.addr)\n\n    const decoded = await fcl.decode(encoded);\n    console.log(\"Decode: \" + decoded);\n    setNftInfo(decoded); //console.log(nftInfo)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"token-data\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fancy\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"viewMeta\",\n          className: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"nftIDMeta\",\n            class: \"mt-3\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"NFT ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 66\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"nftIDMeta\",\n            \"data-field\": \"id\",\n            value: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: fetchTokenData,\n            children: \"Fetch Token Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), nftInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Object.keys(nftInfo).map(k => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [k, \": \", nftInfo[k], showImg(nftInfo[k])]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fancy\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setNftInfo(null),\n              className: \"btn-secondary\",\n              children: \"Clear Token Info\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenData, \"jmGmpsNxFqySt4MoVmikJI7nO/4=\");\n\n_c = TokenData;\nexport default TokenData;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenData\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenData.js"],"names":["React","useState","fcl","t","TokenData","nftInfo","setNftInfo","showImg","s","arr","split","console","log","length","link","fetchTokenData","document","getElementById","value","testVal","authz","addr","addrVal","encoded","send","script","args","arg","Address","UInt64","decoded","decode","Object","keys","map","k"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\n\nconst TokenData = () => {\n  const [nftInfo, setNftInfo] = useState(null)\n\n  // Using this function for displaying ipfs content\n  function showImg(s) {\n    let arr = s.split(\"ipfs://\");\n    console.log(arr);\n    if(s.split(\"ipfs://\").length === 2){\n      let link = \"https://ipfs.io/ipfs/\"+arr[1];\n      console.log(link);\n      //console.log(\"Data Type: \" + typeof(fcl.authz()));\n      //let testVal = (await fcl.authz());\n      //console.log(testVal);\n      return(\n        <img id=\"icon\" src={link} alt=\"Giraffe\"></img>\n      )\n    }\n  }\n\n  const fetchTokenData = async () => {\n    //console.log(\"Metadata ID: \" + document.getElementById(\"nftIDMeta\").value)\n    document.getElementById(\"nftIDMeta\").value\n    let testVal = await fcl.authz()\n    console.log(\"TestVal: \" + await testVal.addr)\n    let addrVal = testVal.addr\n    console.log(\"addrVal: \" + addrVal)\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address, nftId: UInt64) : {String : String} {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n          return receiverRef.getMetadata(id: nftId)\n      }       \n      `,\n      fcl.args( \n        [fcl.arg(\"0x\"+addrVal, t.Address),\n        fcl.arg(3, t.UInt64)] )\n      ])\n    console.log(\"Data Type: \" + typeof(fcl.authz()))\n    //console.log(fcl.authz().addr)\n    //let testVal = await fcl.authz()\n    //console.log(\"TestVal: \" + await testVal.addr)\n    const decoded = await fcl.decode(encoded)\n    console.log(\"Decode: \" + decoded)\n    setNftInfo(decoded)\n    //console.log(nftInfo)\n  };\n  return (\n    <div className=\"token-data\">\n      <div className=\"center\">\n      <div className=\"fancy\">\n      <div id=\"viewMeta\" className=\"center\">\n        <label for=\"nftIDMeta\" class=\"mt-3\"><b>NFT ID</b></label><br/>\n                    <input\n                      type=\"text\"\n                      id=\"nftIDMeta\"\n                      data-field=\"id\"\n                      value='1'/>\n        <button className=\"btn-primary\" onClick={fetchTokenData}>Fetch Token Data</button>        \n      </div>\n      </div>\n      </div>\n      {\n        nftInfo &&\n        <div>\n          {\n            Object.keys(nftInfo).map(k => {\n              return (\n                <p>{k}: {nftInfo[k]}\n                  {showImg(nftInfo[k])}\n                </p>\n              )\n            })\n          }\n          <div className=\"center\">\n          <div className=\"fancy\">\n          <div className=\"center\">\n          <button onClick={() => setNftInfo(null)} className=\"btn-secondary\">Clear Token Info</button>\n          </div>\n          </div>\n          </div>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default TokenData;"]},"metadata":{},"sourceType":"module"}