{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport Modal from 'react-modal';\nimport TokenDataMarketTest from \"./TokenDataMarketTest\"; // Testnet Access Node\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst node = \"https://access-testnet.onflow.org\";\nconst EVENT_MOMENT_LISTED = \"A.1e9bb4b5d4200765.Marketplace.ForSale\";\nconst FETCH_INTERVAL = 1000;\nvar SHIFT = 200;\nlet isSealed = false;\nlet displayAmount = 5;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n\n  return _union;\n}\n\nexport default function MarketGrid() {\n  _s();\n\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [displaySeller, setSeller] = useState(\"\");\n  const [displayPrice, setPrice] = useState(\"\");\n  const [animateTimer, setTimer] = useState(0); //var displaySeller = \"\"\n  //var displayPrice = \"\"\n\n  Modal.setAppElement(document.getElementById('marketplace'));\n\n  function openModal(seller, price) {\n    //displaySeller = seller;\n    //displayPrice = price;\n    setSeller(seller);\n    setPrice(price);\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {// references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function animateLoad() {\n    switch (animateTimer) {\n      case 0:\n        setTimer(1);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Marketplace.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 16\n        }, this);\n\n      case y:\n        // code block\n        break;\n\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Marketplace...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 16\n        }, this);\n    }\n  }\n\n  function loadMarket() {\n    if (events.length == 0) {\n      animateLoad();\n    }\n  }\n\n  const fetchEvents = async height => {\n    if (height == 0) {\n      const latestBlock = await sdk.send(await sdk.build([sdk.getBlock(isSealed)]), {\n        node\n      }); //console.log(latestBlock);\n\n      height = latestBlock.block.height;\n    } //console.log(lastBlock);\n    //console.log(\"Events Found: \" + Object.keys(eventsDictionary).length)\n\n\n    let end = height;\n    let start = height - SHIFT; // fetch events\n\n    const response = await sdk.send(await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]), {\n      node\n    });\n    const {\n      events\n    } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(events.map(event => {\n        const id = event.payload.value.fields[0].value.value;\n        eventsDictionary[id] = event;\n        return id;\n      }));\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    } // update last processed block\n\n\n    setLastBlock(start);\n  };\n\n  useEffect(() => {\n    if (Object.keys(eventsDictionary).length < displayAmount) {\n      const interval = setInterval(fetchEvents(lastBlock), FETCH_INTERVAL);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  });\n  const events = Array.from(eventIDs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"marketplace\",\n    className: \"Marketplace\",\n    children: [console.log(\"Memory Test\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [loadMarket(), events.map(eventId => {\n          const event = eventsDictionary[eventId];\n          const payload = event.payload.value.fields;\n          const [id, price, seller] = payload;\n          const nftId = id.value.value;\n          const nftPrice = price.value.value; //console.log(nftPrice);\n\n          const nftSeller = seller.value.value.value;\n\n          const nftMetadata = /*#__PURE__*/_jsxDEV(TokenDataMarketTest, {\n            account: nftSeller,\n            nftID: nftId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 33\n          }, this);\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => openModal(nftSeller, nftPrice),\n              children: nftMetadata\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 39\n            }, this), /*#__PURE__*/_jsxDEV(Modal, {\n              isOpen: modalIsOpen,\n              onAfterOpen: afterOpenModal,\n              onRequestClose: closeModal,\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"NFT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: closeModal,\n                children: \"close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"buy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [nftMetadata, /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"column\",\n                  children: [\"Seller: \", displaySeller, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 21\n                  }, this), \"Price: \", displayPrice]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketGrid, \"h+U/k4VxXAdSyXRTK9Wk2XOqip8=\");\n\n_c = MarketGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketGrid\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js"],"names":["React","useEffect","useState","sdk","Modal","TokenDataMarketTest","node","EVENT_MOMENT_LISTED","FETCH_INTERVAL","SHIFT","isSealed","displayAmount","union","setA","setB","_union","Set","elem","add","MarketGrid","lastBlock","setLastBlock","eventIDs","setEventIdS","eventsDictionary","setEventsDictionary","modalIsOpen","setIsOpen","displaySeller","setSeller","displayPrice","setPrice","animateTimer","setTimer","setAppElement","document","getElementById","openModal","seller","price","afterOpenModal","closeModal","animateLoad","y","loadMarket","events","length","fetchEvents","height","latestBlock","send","build","getBlock","block","end","start","response","getEventsAtBlockHeightRange","newSet","map","event","id","payload","value","fields","newEvents","Object","keys","interval","setInterval","clearInterval","Array","from","console","log","eventId","nftId","nftPrice","nftSeller","nftMetadata"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport Modal from 'react-modal';\nimport TokenDataMarketTest from \"./TokenDataMarketTest\";\n\n// Testnet Access Node\nconst node = \"https://access-testnet.onflow.org\";\nconst EVENT_MOMENT_LISTED = \"A.1e9bb4b5d4200765.Marketplace.ForSale\";\nconst FETCH_INTERVAL = 1000;\n\nvar SHIFT = 200;\nlet isSealed = false;\nlet displayAmount = 5;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nexport default function MarketGrid() {\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [displaySeller, setSeller] = useState(\"\");\n  const [displayPrice, setPrice] = useState(\"\");\n  const [animateTimer, setTimer] = useState(0);\n  //var displaySeller = \"\"\n  //var displayPrice = \"\"\n\n  Modal.setAppElement(document.getElementById('marketplace'));\n\n  function openModal(seller, price) {\n    //displaySeller = seller;\n    //displayPrice = price;\n    setSeller(seller);\n    setPrice(price);\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function animateLoad() {\n    switch(animateTimer) {\n      case 0:\n        setTimer(1)\n        return <div>Loading Marketplace.</div>\n      case y:\n        // code block\n        break;\n      default:\n        return <div>Loading Marketplace...</div>\n    }\n  }\n\n  function loadMarket() {\n    if (events.length == 0){\n      animateLoad()\n    }\n  }\n\n  const fetchEvents = async (height) => {\n    if (height == 0) {\n      const latestBlock = await sdk.send(\n        await sdk.build([sdk.getBlock(isSealed)]),\n        {\n          node\n        }\n      );\n      //console.log(latestBlock);\n      height = latestBlock.block.height;\n    }\n    //console.log(lastBlock);\n    //console.log(\"Events Found: \" + Object.keys(eventsDictionary).length)\n    let end = height;\n    let start = height-SHIFT;\n\n    // fetch events\n    const response = await sdk.send(\n      await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]),\n      { node }\n    );\n\n    const { events } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(\n        events.map((event) => {\n          const id = event.payload.value.fields[0].value.value;\n          eventsDictionary[id] = event;\n          return id;\n        })\n      );\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    }\n\n    // update last processed block\n    setLastBlock(start);\n  };\n\n  useEffect(() => {\n    if(Object.keys(eventsDictionary).length < displayAmount){\n      const interval = setInterval(fetchEvents(lastBlock), FETCH_INTERVAL);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  });\n\n  const events = Array.from(eventIDs);\n\n  return (\n    \n    <div id=\"marketplace\" className=\"Marketplace\">\n      {console.log(\"Memory Test\")}\n      <div className=\"center\">\n        <div className=\"row\">\n      {loadMarket()}\n      {events.map((eventId) => {\n            const event = eventsDictionary[eventId];\n            const payload = event.payload.value.fields;\n            const [id, price, seller] = payload;\n            const nftId = id.value.value;\n            const nftPrice = price.value.value;\n            //console.log(nftPrice);\n            const nftSeller = seller.value.value.value;\n            const nftMetadata = <TokenDataMarketTest account={nftSeller} nftID={nftId}></TokenDataMarketTest>\n            return (\n              <div className=\"column\"><button onClick={() => openModal(nftSeller,nftPrice)}>\n                {nftMetadata}\n              </button>\n              <Modal\n                isOpen={modalIsOpen}\n                onAfterOpen={afterOpenModal}\n                onRequestClose={closeModal}\n              >\n                <h2>NFT</h2>\n                <button onClick={closeModal}>close</button>\n                <button>buy</button>\n                <div>\n                  {nftMetadata}\n                  <div className=\"column\">\n                    Seller: {displaySeller}\n                    <br/>\n                    Price: {displayPrice}\n                  </div>\n                </div>\n              </Modal></div>\n            );\n          })}\n          </div>\n      </div>     \n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}