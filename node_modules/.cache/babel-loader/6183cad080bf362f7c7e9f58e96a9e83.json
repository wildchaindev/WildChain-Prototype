{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from 'react-router-dom';\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport './App.css';\nimport AuthCluster from './AuthCluster';\nimport MainPage from './pages/MainPage';\nimport AcctPage from './pages/AcctPage';\nimport ZooPage from './pages/ZooPage';\nimport Marketplace from './pages/Marketplace';\nimport MetaMintPage from './pages/MetaMintPage';\nimport NavBar from './pages/components/NavBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [auth, setAuth] = useState(false);\n\n  const checkAccount = async () => {\n    let snapshot = await fcl.currentUser().snapshot();\n    console.log(\"Snapshot: \" + snapshot);\n    let addrVal = await snapshot.addr;\n    console.log(\"addrVal: \" + addrVal);\n\n    if (addrVal != null) {\n      const encoded = await fcl.send([fcl.script`\n        import WildNFT from 0xProfile\n  \n        pub fun main(addr: Address) : Bool {\n        let account = getAccount(0x6acb059f25fc7ba2)\n        let capability = account.getCapability(/public/AccessList) \n        let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n            ?? panic(\"Could not borrow account access list reference\")\n        let minterList = ref.getAccounts()\n  \n        return minterList.contains(addr)\n      }       \n      `, fcl.args([fcl.arg(addrVal, t.Address)])]);\n      const decoded = await fcl.decode(encoded);\n      console.log(\"Auth Decode: \" + decoded);\n      setAuth(decoded);\n    }\n  };\n\n  useEffect(() => {\n    checkAccount();\n  }, [auth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      component: MainPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/Marketplace\",\n      component: Marketplace\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/AcctPage\",\n      render: props => /*#__PURE__*/_jsxDEV(AcctPage, {\n        globalStore: \"test\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 56\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/ZooPage\",\n      component: ZooPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/MetaMintPage\",\n      render: () => checkAccount ? /*#__PURE__*/_jsxDEV(MetaMintPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 74\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 94\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7dXJltoL392rVm1xFgcdCG4Y7Dw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Link","Redirect","fcl","t","AuthCluster","MainPage","AcctPage","ZooPage","Marketplace","MetaMintPage","NavBar","App","auth","setAuth","checkAccount","snapshot","currentUser","console","log","addrVal","addr","encoded","send","script","args","arg","Address","decoded","decode","props"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link, Redirect} from 'react-router-dom';\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport './App.css';\nimport AuthCluster from './AuthCluster';\nimport MainPage from './pages/MainPage';\nimport AcctPage from './pages/AcctPage';\nimport ZooPage from './pages/ZooPage';\nimport Marketplace from './pages/Marketplace';\nimport MetaMintPage from './pages/MetaMintPage';\nimport NavBar from './pages/components/NavBar';\n\nfunction App() {\n  const [auth, setAuth] = useState(false)\n  const checkAccount = async () => {\n    let snapshot = await fcl.currentUser().snapshot()\n    console.log(\"Snapshot: \" + snapshot)\n    let addrVal = await snapshot.addr\n    console.log(\"addrVal: \" + addrVal)\n    if(addrVal != null){\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import WildNFT from 0xProfile\n  \n        pub fun main(addr: Address) : Bool {\n        let account = getAccount(0x6acb059f25fc7ba2)\n        let capability = account.getCapability(/public/AccessList) \n        let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n            ?? panic(\"Could not borrow account access list reference\")\n        let minterList = ref.getAccounts()\n  \n        return minterList.contains(addr)\n      }       \n      `,fcl.args( \n        [fcl.arg(addrVal, t.Address)])\n      ])\n      const decoded = await fcl.decode(encoded)\n      console.log(\"Auth Decode: \" + decoded)\n      setAuth(decoded)\n    }\n  };\n  useEffect(() => {\n  checkAccount();\n  }, [auth]);\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Route exact path=\"/\" component={MainPage}></Route>\n      <Route exact path=\"/Marketplace\" component={Marketplace}></Route>\n      <Route exact path=\"/AcctPage\" render={(props) => <AcctPage globalStore={\"test\"} {...props} /> }></Route>\n      <Route exact path=\"/ZooPage\" component={ZooPage}></Route>\n      <Route exact path=\"/MetaMintPage\" render = {() => (checkAccount ? (<MetaMintPage/>) : (<Redirect to=\"/\" />))}></Route>\n      \n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}