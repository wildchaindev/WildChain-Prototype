{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport Modal from 'react-modal';\nimport TokenDataMarketTest from \"./TokenDataMarketTest\"; // Mainnet Access Node\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst node = \"http://localhost:8080\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\"; // since last block returned is not sealed\n// we will go back a bit back in time\n\nvar SHIFT = 1;\nlet isSealed = false;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n\n  return _union;\n}\n\nModal.setAppElement(document.getElementById('Marketplace'));\nexport default function MarketGrid() {\n  _s();\n\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {// references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const fetchEvents = async () => {\n    const latestBlock = await sdk.send(await sdk.build([sdk.getBlock(isSealed)]), {\n      node\n    });\n    const height = latestBlock.block.height;\n    let end = height;\n    let start = SHIFT; // fetch events\n\n    const response = await sdk.send(await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]), {\n      node\n    });\n    const {\n      events\n    } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(events.map(event => {\n        const id = event.payload.value.fields[0].value.value;\n        eventsDictionary[id] = event;\n        return id;\n      }));\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    } // update last processed block\n\n\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const events = Array.from(eventIDs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Marketplace\",\n    children: [console.log(\"Memory Test\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: events.map(eventId => {\n        const event = eventsDictionary[eventId];\n        const payload = event.payload.value.fields;\n        const [id, price, seller] = payload;\n        const nftId = id.value.value;\n        const nftPrice = price.value.value;\n        const nftSeller = seller.value.value.value;\n\n        const nftMetadata = /*#__PURE__*/_jsxDEV(TokenDataMarketTest, {\n          account: nftSeller,\n          nftID: nftId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }, this);\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: openModal,\n            children: nftMetadata\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(Modal, {\n            isOpen: modalIsOpen,\n            onAfterOpen: afterOpenModal,\n            onRequestClose: closeModal,\n            contentLabel: \"Example Modal\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"NFT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: closeModal,\n              children: \"close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [nftMetadata, /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"column\",\n                children: [\"Price: \", nftPrice, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 21\n                }, this), \"Seller: \", nftSeller]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketGrid, \"gSNd8arp6+XVFPJn6ghfrXwkR4c=\");\n\n_c = MarketGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketGrid\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js"],"names":["React","useEffect","useState","sdk","Modal","TokenDataMarketTest","node","EVENT_MOMENT_LISTED","SHIFT","isSealed","union","setA","setB","_union","Set","elem","add","setAppElement","document","getElementById","MarketGrid","lastBlock","setLastBlock","eventIDs","setEventIdS","eventsDictionary","setEventsDictionary","modalIsOpen","setIsOpen","openModal","afterOpenModal","closeModal","fetchEvents","latestBlock","send","build","getBlock","height","block","end","start","response","getEventsAtBlockHeightRange","events","length","newSet","map","event","id","payload","value","fields","newEvents","Array","from","console","log","eventId","price","seller","nftId","nftPrice","nftSeller","nftMetadata"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport Modal from 'react-modal';\nimport TokenDataMarketTest from \"./TokenDataMarketTest\";\n\n// Mainnet Access Node\nconst node = \"http://localhost:8080\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\";\n\n// since last block returned is not sealed\n// we will go back a bit back in time\nvar SHIFT = 1;\nlet isSealed = false\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nModal.setAppElement(document.getElementById('Marketplace'));\n\nexport default function MarketGrid() {\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const fetchEvents = async () => {\n    const latestBlock = await sdk.send(\n      await sdk.build([sdk.getBlock(isSealed)]),\n      {\n        node\n      }\n    );\n\n    const height = latestBlock.block.height;\n    let end = height;\n    let start = SHIFT;\n\n    // fetch events\n    const response = await sdk.send(\n      await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]),\n      { node }\n    );\n\n    const { events } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(\n        events.map((event) => {\n          const id = event.payload.value.fields[0].value.value;\n          eventsDictionary[id] = event;\n          return id;\n        })\n      );\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    }\n\n    // update last processed block\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  },[]);\n\n  const events = Array.from(eventIDs);\n\n  return (\n    \n    <div className=\"Marketplace\">\n      {console.log(\"Memory Test\")}\n      <div className=\"center\">\n      {events.map((eventId) => {\n            const event = eventsDictionary[eventId];\n            const payload = event.payload.value.fields;\n            const [id, price, seller] = payload;\n            const nftId = id.value.value;\n            const nftPrice = price.value.value;\n            const nftSeller = seller.value.value.value;\n            const nftMetadata = <TokenDataMarketTest account={nftSeller} nftID={nftId}></TokenDataMarketTest>\n            return (\n              <div className=\"column\"><button onClick={openModal}>{nftMetadata}</button>\n              <Modal\n                isOpen={modalIsOpen}\n                onAfterOpen={afterOpenModal}\n                onRequestClose={closeModal}\n                contentLabel=\"Example Modal\"\n              >\n                <h2>NFT</h2>\n                <button onClick={closeModal}>close</button>\n                <div>\n                  {nftMetadata}\n                  <div className=\"column\">\n                    Price: {nftPrice}\n                    <br/>\n                    Seller: {nftSeller}\n                  </div>\n                </div>\n              </Modal></div>\n            );\n          })}\n      </div>     \n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}