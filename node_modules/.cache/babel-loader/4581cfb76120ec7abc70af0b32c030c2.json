{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayNFTGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayNFTGrid = () => {\n  _s();\n\n  const [nftInfo, setNftInfo] = useState(null);\n\n  const display = async () => {\n    let test = await fcl.authz();\n    let addrVal = test.addr;\n    const encoded = await fcl.send([fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address) : [String]? {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n\n          var URIs = [String]\n          let ids = receiverRef.getIDs()\n          for element in ids {\n            let data = receiverRef.getMetadata(id: element)\n            URIs.append(data[\"uri\"])\n          }\n          return URIs\n      }       \n      `, fcl.args([fcl.arg(\"0x\" + addrVal, t.Address)])]);\n    const decoded = await fcl.decode(encoded);\n    console.log(\"Decode: \" + decoded);\n    setNftInfo(decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-ids\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: display,\n        children: \"Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), nftInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DisplayNFTGrid, \"jmGmpsNxFqySt4MoVmikJI7nO/4=\");\n\n_c = DisplayNFTGrid;\nexport default DisplayNFTGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayNFTGrid\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayNFTGrid.js"],"names":["React","useState","fcl","t","DisplayNFTGrid","nftInfo","setNftInfo","display","test","authz","addrVal","addr","encoded","send","script","args","arg","Address","decoded","decode","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMM,OAAO,GAAG,YAAY;AAC1B,QAAIC,IAAI,GAAG,MAAMN,GAAG,CAACO,KAAJ,EAAjB;AACA,QAAIC,OAAO,GAAGF,IAAI,CAACG,IAAnB;AACA,UAAMC,OAAO,GAAG,MAAMV,GAAG,CACtBW,IADmB,CACd,CACJX,GAAG,CAACY,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA5BY,EA6BNZ,GAAG,CAACa,IAAJ,CACE,CAACb,GAAG,CAACc,GAAJ,CAAQ,OAAKN,OAAb,EAAsBP,CAAC,CAACc,OAAxB,CAAD,CADF,CA7BM,CADc,CAAtB;AAkCA,UAAMC,OAAO,GAAG,MAAMhB,GAAG,CAACiB,MAAJ,CAAWP,OAAX,CAAtB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaH,OAAzB;AACAZ,IAAAA,UAAU,CAACY,OAAD,CAAV;AACD,GAxCD;;AAyCA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEX,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKF,OAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAnDD;;GAAMD,c;;KAAAA,c;AAqDN,eAAeA,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\n\nconst DisplayNFTGrid = () => {\n  const [nftInfo, setNftInfo] = useState(null)\n  const display = async () => {\n    let test = await fcl.authz()\n    let addrVal = test.addr\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address) : [String]? {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n\n          var URIs = [String]\n          let ids = receiverRef.getIDs()\n          for element in ids {\n            let data = receiverRef.getMetadata(id: element)\n            URIs.append(data[\"uri\"])\n          }\n          return URIs\n      }       \n      `,\n      fcl.args( \n        [fcl.arg(\"0x\"+addrVal, t.Address)]\n        )\n      ])\n    const decoded = await fcl.decode(encoded)\n    console.log(\"Decode: \" + decoded)\n    setNftInfo(decoded)\n  };\n  return (\n    <div className=\"nft-ids\">\n    <div className=\"center\">\n        <button className=\"btn-primary\" onClick={display}>Grid</button> \n        {nftInfo}       \n    </div>\n    </div>\n  );\n};\n\nexport default DisplayNFTGrid;"]},"metadata":{},"sourceType":"module"}