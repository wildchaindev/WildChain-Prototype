{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TransactionTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TransactionOne() {\n  _s();\n\n  const [status, setStatus] = useState(\"Not Started\");\n\n  const runTransaction = async e => {\n    e.preventDefault();\n    setStatus(\"Resolving...\");\n    const response = await fcl.send([fcl.transaction`\n      pub struct SomeStruct {\n        pub var x: Int\n        pub var y: Int\n\n        init(x: Int, y: Int) {\n          self.x = x\n          self.y = y\n        }\n      }\n\n      pub fun main(): [SomeStruct] {\n        return [SomeStruct(x: 1, y: 2), SomeStruct(x: 3, y: 4)]\n      }\n        transaction {\n          prepare(acct: AuthAccount) {\n          }\n          execute {\n            main()\n            log(\"A transaction happened\")\n          }\n        }\n      `, fcl.proposer(fcl.currentUser().authorization), fcl.payer(fcl.currentUser().authorization)]);\n    setStatus(\"Transaction Sent, Waiting for Confirmation\");\n    const unsub = fcl.tx(response).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\");\n        unsub();\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-primary\",\n      onClick: runTransaction,\n      children: \"Run Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionOne, \"1jqZiVMwxiCVyEhB0xNOkX33l5A=\");\n\n_c = TransactionOne;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionOne\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TransactionTest.js"],"names":["React","useState","useEffect","fcl","TransactionOne","status","setStatus","runTransaction","e","preventDefault","response","send","transaction","proposer","currentUser","authorization","payer","unsub","tx","subscribe","isSealed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,aAAD,CAApC;;AACA,QAAMM,cAAc,GAAG,MAAMC,CAAN,IAAW;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,SAAS,CAAC,cAAD,CAAT;AAEA,UAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,CAC9BR,GAAG,CAACS,WAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAvBoC,EAwB9BT,GAAG,CAACU,QAAJ,CAAaV,GAAG,CAACW,WAAJ,GAAkBC,aAA/B,CAxB8B,EAyB9BZ,GAAG,CAACa,KAAJ,CAAUb,GAAG,CAACW,WAAJ,GAAkBC,aAA5B,CAzB8B,CAAT,CAAvB;AA4BAT,IAAAA,SAAS,CAAC,4CAAD,CAAT;AAEA,UAAMW,KAAK,GAAGd,GAAG,CAACe,EAAJ,CAAOR,QAAP,EAAiBS,SAAjB,CAA2BP,WAAW,IAAI;AACtD,UAAIT,GAAG,CAACe,EAAJ,CAAOE,QAAP,CAAgBR,WAAhB,CAAJ,EAAkC;AAChCN,QAAAA,SAAS,CAAC,kCAAD,CAAT;AACAW,QAAAA,KAAK;AACN;AACF,KALa,CAAd;AAMD,GAxCD;;AA0CA,sBACE;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAEV,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GApDuBD,c;;KAAAA,c","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport * as fcl from \"@onflow/fcl\"\n \nexport default function TransactionOne() {\n  const [status, setStatus] = useState(\"Not Started\")\n  const runTransaction = async e => {\n    e.preventDefault()\n    setStatus(\"Resolving...\")\n \n    const response = await fcl.send([\n      fcl.transaction`\n      pub struct SomeStruct {\n        pub var x: Int\n        pub var y: Int\n\n        init(x: Int, y: Int) {\n          self.x = x\n          self.y = y\n        }\n      }\n\n      pub fun main(): [SomeStruct] {\n        return [SomeStruct(x: 1, y: 2), SomeStruct(x: 3, y: 4)]\n      }\n        transaction {\n          prepare(acct: AuthAccount) {\n          }\n          execute {\n            main()\n            log(\"A transaction happened\")\n          }\n        }\n      `,\n      fcl.proposer(fcl.currentUser().authorization),\n      fcl.payer(fcl.currentUser().authorization),\n    ])\n    \n    setStatus(\"Transaction Sent, Waiting for Confirmation\")\n \n    const unsub = fcl.tx(response).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\")\n        unsub()\n      }\n    })\n  }\n \n  return (\n    <div>\n      <button className=\"btn-primary\" onClick={runTransaction}>Run Transaction</button>\n      <div>\n        {status}\n      </div>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}