{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport TokenDataMarketTest from \"./TokenDataMarketTest\"; // Mainnet Access Node\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst node = \"http://localhost:8080\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\"; // since last block returned is not sealed\n// we will go back a bit back in time\n\nvar SHIFT = 1;\nlet isSealed = false;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n\n  return _union;\n}\n\nexport default function MarketGrid() {\n  _s();\n\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  /*const showNFT = async() => {\n    let arr = s.split(\"ipfs://\");\n    if(s.split(\"ipfs://\").length === 2){\n      let link = \"https://ipfs.io/ipfs/\"+arr[1];\n      console.log(link)\n      if(rowCt === 3){\n        return <br><img id=\"gridIcon\" src={link} alt=\"Giraffe\"></img></br>\n      }\n      return <img id=\"gridIcon\" src={link} alt=\"Giraffe\"></img>\n    }   \n  }*/\n\n  const fetchEvents = async () => {\n    const latestBlock = await sdk.send(await sdk.build([sdk.getBlock(isSealed)]), {\n      node\n    });\n    const height = latestBlock.block.height;\n    let end = height;\n    let start = SHIFT; // fetch events\n\n    const response = await sdk.send(await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]), {\n      node\n    });\n    const {\n      events\n    } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(events.map(event => {\n        const id = event.payload.value.fields[0].value.value;\n        eventsDictionary[id] = event;\n        return id;\n      }));\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    } // update last processed block\n\n\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const events = Array.from(eventIDs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Marketplace\",\n    children: [console.log(\"Memory Test\"), events.map(eventId => {\n      console.log(eventId % 3);\n      const event = eventsDictionary[eventId];\n      const payload = event.payload.value.fields;\n      const [id, price, seller] = payload;\n      const nftId = id.value.value;\n      const nftPrice = price.value.value;\n      const nftSeller = seller.value.value.value;\n\n      const nftMetadata = /*#__PURE__*/_jsxDEV(TokenDataMarketTest, {\n        account: nftSeller,\n        nftID: nftId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }, this);\n\n      if (eventId % 3 === 0) {\n        return /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 22\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: nftMetadata\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketGrid, \"Fc8Re4wTqNoH+abffBDvr6XAv6I=\");\n\n_c = MarketGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketGrid\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js"],"names":["React","useEffect","useState","sdk","TokenDataMarketTest","node","EVENT_MOMENT_LISTED","SHIFT","isSealed","union","setA","setB","_union","Set","elem","add","MarketGrid","lastBlock","setLastBlock","eventIDs","setEventIdS","eventsDictionary","setEventsDictionary","fetchEvents","latestBlock","send","build","getBlock","height","block","end","start","response","getEventsAtBlockHeightRange","events","length","newSet","map","event","id","payload","value","fields","newEvents","Array","from","console","log","eventId","price","seller","nftId","nftPrice","nftSeller","nftMetadata"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport TokenDataMarketTest from \"./TokenDataMarketTest\";\n\n// Mainnet Access Node\nconst node = \"http://localhost:8080\";\nconst EVENT_MOMENT_LISTED = \"A.f8d6e0586b0a20c7.Marketplace.ForSale\";\n\n// since last block returned is not sealed\n// we will go back a bit back in time\nvar SHIFT = 1;\nlet isSealed = false\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nexport default function MarketGrid() {\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n\n  /*const showNFT = async() => {\n    let arr = s.split(\"ipfs://\");\n    if(s.split(\"ipfs://\").length === 2){\n      let link = \"https://ipfs.io/ipfs/\"+arr[1];\n      console.log(link)\n      if(rowCt === 3){\n        return <br><img id=\"gridIcon\" src={link} alt=\"Giraffe\"></img></br>\n      }\n      return <img id=\"gridIcon\" src={link} alt=\"Giraffe\"></img>\n    }   \n  }*/\n\n  const fetchEvents = async () => {\n    const latestBlock = await sdk.send(\n      await sdk.build([sdk.getBlock(isSealed)]),\n      {\n        node\n      }\n    );\n\n    const height = latestBlock.block.height;\n    let end = height;\n    let start = SHIFT;\n\n    // fetch events\n    const response = await sdk.send(\n      await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]),\n      { node }\n    );\n\n    const { events } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(\n        events.map((event) => {\n          const id = event.payload.value.fields[0].value.value;\n          eventsDictionary[id] = event;\n          return id;\n        })\n      );\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    }\n\n    // update last processed block\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  },[]);\n\n  const events = Array.from(eventIDs);\n\n  return (\n    \n    <div className=\"Marketplace\">\n      {console.log(\"Memory Test\")}\n      {events.map((eventId) => {\n            console.log(eventId%3)\n            const event = eventsDictionary[eventId];\n            const payload = event.payload.value.fields;\n            const [id, price, seller] = payload;\n            const nftId = id.value.value;\n            const nftPrice = price.value.value;\n            const nftSeller = seller.value.value.value;\n            const nftMetadata = <TokenDataMarketTest account={nftSeller} nftID={nftId}></TokenDataMarketTest>\n            if (eventId%3 === 0){\n              return <br/>\n            }\n            return (\n              <div>{nftMetadata}</div>\n            );\n          })}\n      \n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}