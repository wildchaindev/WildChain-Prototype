{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ListForSale.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListForSale = () => {\n  _s();\n\n  const [status, setStatus] = useState(\"Not Started\");\n\n  const sell = async () => {\n    let metaID = parseInt(document.getElementById(\"acctNftIDMeta\").value);\n    let price = document.getElementById(\"acctNftPrice\").value;\n    const encoded = await fcl.send([fcl.transaction`\n        import DappState,WildCoin,Marketplace from 0xProfile\n\n// Transaction that \"posts an NFT on the marketplace as for sale\" by:\n// creating a sale collection, \n// withdrawing an NFT from the receiver account, \n// and calling the Marketplace function to emit the ForSale event\n// and post the NFT with its price on the site. \n\ntransaction(nftID: UInt64, salePrice: UFix64){\n\n  prepare(acct: AuthAccount) {\n      let receiver = acct.getCapability<&{WildCoin.Receiver}>(/public/Vault)\n\n      //let sale = acct.borrow<&Marketplace.SaleCollection>(from: /storage/NFTSale)\n      let sale <- acct.load<@Marketplace.SaleCollection>(from: /storage/NFTSale)!\n      let collectionRef = acct.borrow<&DappState.Collection>(from: /storage/DappStateCollection)\n          ?? panic(\"Could not borrow owner's nft collection reference\")\n\n      let token <- collectionRef.withdraw(withdrawID: nftID)\n\n      sale.listForSale(token: <-token, price: salePrice)\n\n      acct.save(<-sale, to: /storage/NFTSale)\n\n      //acct.link<&Marketplace.SaleCollection{Marketplace.SalePublic}>(/public/NFTSale, target: /storage/NFTSale)\n\n  }\n}\n      `, fcl.proposer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.payer(fcl.authz), fcl.limit(35), fcl.args([fcl.arg(metaID, t.UInt64), fcl.arg(price, t.UFix64)])]);\n    setStatus(\"Transaction Sent, Waiting for Confirmation\");\n    const decoded = await fcl.decode(encoded);\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\");\n        unsub();\n      }\n    });\n    console.log(decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fancy\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: sell,\n            children: \"List For Sale\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListForSale, \"1jqZiVMwxiCVyEhB0xNOkX33l5A=\");\n\n_c = ListForSale;\nexport default ListForSale;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListForSale\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ListForSale.js"],"names":["React","useState","fcl","t","ListForSale","status","setStatus","sell","metaID","parseInt","document","getElementById","value","price","encoded","send","transaction","proposer","authz","authorizations","payer","limit","args","arg","UInt64","UFix64","decoded","decode","unsub","tx","subscribe","isSealed","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,aAAD,CAApC;;AACA,QAAMM,IAAI,GAAG,YAAY;AACvB,QAAIC,MAAM,GAAGC,QAAQ,CAACC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,KAA1C,CAArB;AACA,QAAIC,KAAK,GAAGH,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAApD;AACA,UAAME,OAAO,GAAG,MAAMZ,GAAG,CACtBa,IADmB,CACd,CACJb,GAAG,CAACc,WAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA9BY,EA+BNd,GAAG,CAACe,QAAJ,CAAaf,GAAG,CAACgB,KAAjB,CA/BM,EAgCNhB,GAAG,CAACiB,cAAJ,CAAmB,CAACjB,GAAG,CAACgB,KAAL,CAAnB,CAhCM,EAiCNhB,GAAG,CAACkB,KAAJ,CAAUlB,GAAG,CAACgB,KAAd,CAjCM,EAkCNhB,GAAG,CAACmB,KAAJ,CAAU,EAAV,CAlCM,EAmCNnB,GAAG,CAACoB,IAAJ,CACE,CAAEpB,GAAG,CAACqB,GAAJ,CAAQf,MAAR,EAAgBL,CAAC,CAACqB,MAAlB,CAAF,EACEtB,GAAG,CAACqB,GAAJ,CAAQV,KAAR,EAAeV,CAAC,CAACsB,MAAjB,CADF,CADF,CAnCM,CADc,CAAtB;AAyCAnB,IAAAA,SAAS,CAAC,4CAAD,CAAT;AACA,UAAMoB,OAAO,GAAG,MAAMxB,GAAG,CAACyB,MAAJ,CAAWb,OAAX,CAAtB;AACA,UAAMc,KAAK,GAAG1B,GAAG,CAAC2B,EAAJ,CAAOH,OAAP,EAAgBI,SAAhB,CAA0Bd,WAAW,IAAI;AACrD,UAAId,GAAG,CAAC2B,EAAJ,CAAOE,QAAP,CAAgBf,WAAhB,CAAJ,EAAkC;AAChCV,QAAAA,SAAS,CAAC,kCAAD,CAAT;AACAsB,QAAAA,KAAK;AACN;AACF,KALa,CAAd;AAMAI,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAED,GAtDD;;AAuDA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCACI;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAgC,YAAA,OAAO,EAAEnB,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,sBACGF;AADH;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAvED;;GAAMD,W;;KAAAA,W;AAyEN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\"\n\nconst ListForSale = () => {\n  const [status, setStatus] = useState(\"Not Started\")\n  const sell = async () => {\n    let metaID = parseInt(document.getElementById(\"acctNftIDMeta\").value)\n    let price = document.getElementById(\"acctNftPrice\").value\n    const encoded = await fcl\n      .send([\n        fcl.transaction`\n        import DappState,WildCoin,Marketplace from 0xProfile\n\n// Transaction that \"posts an NFT on the marketplace as for sale\" by:\n// creating a sale collection, \n// withdrawing an NFT from the receiver account, \n// and calling the Marketplace function to emit the ForSale event\n// and post the NFT with its price on the site. \n\ntransaction(nftID: UInt64, salePrice: UFix64){\n\n  prepare(acct: AuthAccount) {\n      let receiver = acct.getCapability<&{WildCoin.Receiver}>(/public/Vault)\n\n      //let sale = acct.borrow<&Marketplace.SaleCollection>(from: /storage/NFTSale)\n      let sale <- acct.load<@Marketplace.SaleCollection>(from: /storage/NFTSale)!\n      let collectionRef = acct.borrow<&DappState.Collection>(from: /storage/DappStateCollection)\n          ?? panic(\"Could not borrow owner's nft collection reference\")\n\n      let token <- collectionRef.withdraw(withdrawID: nftID)\n\n      sale.listForSale(token: <-token, price: salePrice)\n\n      acct.save(<-sale, to: /storage/NFTSale)\n\n      //acct.link<&Marketplace.SaleCollection{Marketplace.SalePublic}>(/public/NFTSale, target: /storage/NFTSale)\n\n  }\n}\n      `,\n      fcl.proposer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.payer(fcl.authz),\n      fcl.limit(35),\n      fcl.args( \n        [ fcl.arg(metaID, t.UInt64),\n          fcl.arg(price, t.UFix64)] )\n    ]\n    )\n    setStatus(\"Transaction Sent, Waiting for Confirmation\")\n    const decoded = await fcl.decode(encoded)\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\")\n        unsub()\n      }\n    })\n    console.log(decoded)\n\n  };\n  return (\n    <div className=\"mint-nft\">\n        <div className=\"center\">\n        <div className=\"fancy\">\n        <div className=\"center\">\n            <button className=\"btn-primary\" onClick={sell}>List For Sale</button>  \n            <div>\n              {status}\n            </div>      \n        </div>\n        </div>\n        </div>\n    </div>\n  );\n};\n\nexport default ListForSale;"]},"metadata":{},"sourceType":"module"}