{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport TokenDataMarketTest from \"./TokenDataMarketTest\"; // Mainnet Access Node\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst node = \"https://access-testnet.onflow.org\";\nconst EVENT_MOMENT_LISTED = \"A.1e9bb4b5d4200765.Marketplace.ForSale\"; // since last block returned is not sealed\n// we will go back a bit back in time\n\nvar SHIFT = 1;\nlet isSealed = false;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n\n  return _union;\n}\n\nexport default function MarketTest() {\n  _s();\n\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n\n  const fetchEvents = async () => {\n    console.log(\"Fetching Block\");\n    const latestBlock = await sdk.send(await sdk.build([sdk.getBlock(isSealed)]), {\n      node\n    });\n    console.log(latestBlock);\n    const height = latestBlock.block.height;\n    let end = height;\n    let start = SHIFT; // fetch events\n\n    const response = await sdk.send(await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]), {\n      node\n    });\n    const {\n      events\n    } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(events.map(event => {\n        const id = event.payload.value.fields[0].value.value;\n        eventsDictionary[id] = event;\n        return id;\n      }));\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    } // update last processed block\n\n\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const events = Array.from(eventIDs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Marketplace\",\n    children: [console.log(\"Memory Test\"), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latest processed block: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"#\", lastBlock]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Events found: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: events.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"styled-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            align: \"left\",\n            children: \"NFT ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            align: \"left\",\n            children: \"Seller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            align: \"left\",\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            align: \"left\",\n            children: \"Metadata\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: events.map(eventId => {\n          const event = eventsDictionary[eventId];\n          const payload = event.payload.value.fields;\n          const [id, price, seller] = payload;\n          const nftId = id.value.value;\n          const nftPrice = price.value.value;\n          const nftSeller = seller.value.value.value;\n\n          const nftMetadata = /*#__PURE__*/_jsxDEV(TokenDataMarketTest, {\n            account: nftSeller,\n            nftID: nftId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 33\n          }, this);\n\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"left\",\n              children: [\"#\", nftId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"left\",\n              children: [\"#\", nftSeller]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"left\",\n              children: [\"#\", nftPrice]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              align: \"left\",\n              children: nftMetadata\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketTest, \"Fc8Re4wTqNoH+abffBDvr6XAv6I=\");\n\n_c = MarketTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketTest\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketTest.js"],"names":["React","useEffect","useState","sdk","TokenDataMarketTest","node","EVENT_MOMENT_LISTED","SHIFT","isSealed","union","setA","setB","_union","Set","elem","add","MarketTest","lastBlock","setLastBlock","eventIDs","setEventIdS","eventsDictionary","setEventsDictionary","fetchEvents","console","log","latestBlock","send","build","getBlock","height","block","end","start","response","getEventsAtBlockHeightRange","events","length","newSet","map","event","id","payload","value","fields","newEvents","Array","from","eventId","price","seller","nftId","nftPrice","nftSeller","nftMetadata"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport TokenDataMarketTest from \"./TokenDataMarketTest\";\n\n// Mainnet Access Node\nconst node = \"https://access-testnet.onflow.org\";\nconst EVENT_MOMENT_LISTED = \"A.1e9bb4b5d4200765.Marketplace.ForSale\";\n\n// since last block returned is not sealed\n// we will go back a bit back in time\nvar SHIFT = 1;\nlet isSealed = false\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nexport default function MarketTest() {\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n\n  const fetchEvents = async () => {\n    console.log(\"Fetching Block\");\n    const latestBlock = await sdk.send(\n      await sdk.build([sdk.getBlock(isSealed)]),\n      {\n        node\n      }\n    );\n    console.log(latestBlock);\n\n    const height = latestBlock.block.height;\n    let end = height;\n    let start = SHIFT;\n\n    // fetch events\n    const response = await sdk.send(\n      await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]),\n      { node }\n    );\n\n    const { events } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(\n        events.map((event) => {\n          const id = event.payload.value.fields[0].value.value;\n          eventsDictionary[id] = event;\n          return id;\n        })\n      );\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    }\n\n    // update last processed block\n    setLastBlock(height);\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  },[]);\n\n  const events = Array.from(eventIDs);\n\n  return (\n    \n    <div className=\"Marketplace\">\n      {console.log(\"Memory Test\")}\n      <p>\n        Latest processed block: <b>#{lastBlock}</b>\n      </p>\n      <p>\n        Events found: <b>{events.length}</b>\n      </p>\n      <table className=\"styled-table\">\n        <thead>\n          <tr>\n            <th align=\"left\">NFT ID</th>\n            <th align=\"left\">Seller</th>\n            <th align=\"left\">Price</th>\n            <th align=\"left\">Metadata</th>\n          </tr>\n        </thead>\n        <tbody>\n          {events.map((eventId) => {\n            const event = eventsDictionary[eventId];\n            const payload = event.payload.value.fields;\n            const [id, price, seller] = payload;\n            const nftId = id.value.value;\n            const nftPrice = price.value.value;\n            const nftSeller = seller.value.value.value;\n            const nftMetadata = <TokenDataMarketTest account={nftSeller} nftID={nftId}></TokenDataMarketTest>\n            return (\n              <tr>\n                <td align=\"left\">#{nftId}</td>\n                <td align=\"left\">#{nftSeller}</td>\n                <td align=\"left\">#{nftPrice}</td>\n                <td align=\"left\">{nftMetadata}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}