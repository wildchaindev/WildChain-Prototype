{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenDatav2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenDatav2 = () => {\n  _s();\n\n  const [nftInfo, setNftInfo] = useState(null); // Using this function for displaying ipfs content\n\n  function showImg(s) {\n    let arr = s.split(\"ipfs://\");\n    console.log(arr);\n\n    if (s.split(\"ipfs://\").length == 2) {\n      let link = \"https://ipfs.io/ipfs/\" + arr[1];\n      console.log(link);\n      console.log(\"Data Type: \" + typeof fcl.currentUser().authorization);\n      console.log(\"Value: \" + fcl.currentUser().authenticate);\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"icon\",\n        src: link,\n        alt: \"Giraffe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  const fetchTokenData = async () => {\n    const encoded = await fcl.send([fcl.script`\n        import Profile from 0xba1132bc08f82fe2\n  \n        pub fun main(address: Address): Profile.ReadOnly? {\n          return Profile.read(address)\n        }\n      `, fcl.args([fcl.arg(\"0xba1132bc08f82fe2\", t.Address) // <-- t.Address this time :)\n    ])]).then(fcl.decode); //const decoded = await fcl.decode(encoded)\n    //console.log(nftInfo)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"token-data\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fancy\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: fetchTokenData,\n            children: \"Fetch Token Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenDatav2, \"jmGmpsNxFqySt4MoVmikJI7nO/4=\");\n\n_c = TokenDatav2;\nexport default TokenDatav2;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenDatav2\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenDatav2.js"],"names":["React","useState","fcl","t","TokenDatav2","nftInfo","setNftInfo","showImg","s","arr","split","console","log","length","link","currentUser","authorization","authenticate","fetchTokenData","encoded","send","script","args","arg","Address","then","decode"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,IAAD,CAAtC,CADwB,CAGxB;;AACA,WAASM,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,QAAIC,GAAG,GAAGD,CAAC,CAACE,KAAF,CAAQ,SAAR,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAGD,CAAC,CAACE,KAAF,CAAQ,SAAR,EAAmBG,MAAnB,IAA6B,CAAhC,EAAkC;AAChC,UAAIC,IAAI,GAAG,0BAAwBL,GAAG,CAAC,CAAD,CAAtC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgB,OAAOV,GAAG,CAACa,WAAJ,GAAkBC,aAArD;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYV,GAAG,CAACa,WAAJ,GAAkBE,YAA1C;AACA,0BACE;AAAK,QAAA,EAAE,EAAC,MAAR;AAAe,QAAA,GAAG,EAAEH,IAApB;AAA0B,QAAA,GAAG,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,cADF;AAGD;AACF;;AAED,QAAMI,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAG,MAAMjB,GAAG,CACxBkB,IADqB,CAChB,CACJlB,GAAG,CAACmB,MAAO;AACjB;AACA;AACA;AACA;AACA;AACA,OAPU,EAQJnB,GAAG,CAACoB,IAAJ,CAAS,CACPpB,GAAG,CAACqB,GAAJ,CAAQ,oBAAR,EAA8BpB,CAAC,CAACqB,OAAhC,CADO,CACmC;AADnC,KAAT,CARI,CADgB,EAYnBC,IAZmB,CAYdvB,GAAG,CAACwB,MAZU,CAAtB,CADiC,CAejC;AACA;AACD,GAjBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,iCACE;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAgC,YAAA,OAAO,EAAER,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA/CD;;GAAMd,W;;KAAAA,W;AAiDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\n\nconst TokenDatav2 = () => {\n  const [nftInfo, setNftInfo] = useState(null)\n\n  // Using this function for displaying ipfs content\n  function showImg(s) {\n    let arr = s.split(\"ipfs://\")\n    console.log(arr);\n    if(s.split(\"ipfs://\").length == 2){\n      let link = \"https://ipfs.io/ipfs/\"+arr[1];\n      console.log(link);\n      console.log(\"Data Type: \" + typeof(fcl.currentUser().authorization));\n      console.log(\"Value: \" + fcl.currentUser().authenticate);\n      return(\n        <img id=\"icon\" src={link} alt=\"Giraffe\"></img>\n      )\n    }\n  }\n\n  const fetchTokenData = async () => {\n    const encoded = await fcl\n    .send([\n      fcl.script`\n        import Profile from 0xba1132bc08f82fe2\n  \n        pub fun main(address: Address): Profile.ReadOnly? {\n          return Profile.read(address)\n        }\n      `,\n      fcl.args([\n        fcl.arg(\"0xba1132bc08f82fe2\", t.Address), // <-- t.Address this time :)\n      ]),\n    ]).then(fcl.decode)\n    \n    //const decoded = await fcl.decode(encoded)\n    //console.log(nftInfo)\n  };\n  return (\n    <div className=\"token-data\">\n      <div className=\"center\">\n      <div className=\"fancy\">\n      <div className=\"center\">\n        <button className=\"btn-primary\" onClick={fetchTokenData}>Fetch Token Data</button>        \n      </div>\n      </div>\n      </div>  \n    </div>\n  );\n};\n\nexport default TokenDatav2;"]},"metadata":{},"sourceType":"module"}