{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/InitializeAcct.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InitializeAcct = () => {\n  _s();\n\n  const [status, setStatus] = useState(\"Not Started\");\n\n  const Mint = async () => {\n    const encoded = await fcl.send([fcl.transaction`\n        import Profile from 0xba1132bc08f82fe2\n\n        transaction {\n          // We want the account's address for later so we can verify if the account was initialized properly\n          let address: Address\n\n          prepare(account: AuthAccount) {\n            // save the address for the post check\n            self.address = account.address\n\n            // Only initialize the account if it hasn't already been initialized\n            if (!Profile.check(self.address)) {\n              // This creates and stores the profile in the user's account\n              account.save(<- Profile.new(), to: Profile.privatePath)\n\n              // This creates the public capability that lets applications read the profile's info\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\n            }\n          }\n\n          // verify that the account has been initialized\n          post {\n            Profile.check(self.address): \"Account was not initialized\"\n          }\n        }\n      `, fcl.proposer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.payer(fcl.authz)]);\n    setStatus(\"Transaction Sent, Waiting for Confirmation\");\n    const decoded = await fcl.decode(encoded);\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(decoded);\n        unsub();\n      }\n    });\n    console.log(decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fancy\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: Mint,\n            children: \"InitializeAcct\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InitializeAcct, \"1jqZiVMwxiCVyEhB0xNOkX33l5A=\");\n\n_c = InitializeAcct;\nexport default InitializeAcct;\n\nvar _c;\n\n$RefreshReg$(_c, \"InitializeAcct\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/InitializeAcct.js"],"names":["React","useState","fcl","t","InitializeAcct","status","setStatus","Mint","encoded","send","transaction","proposer","authz","authorizations","payer","decoded","decode","unsub","tx","subscribe","isSealed","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,aAAD,CAApC;;AACA,QAAMM,IAAI,GAAG,YAAY;AACvB,UAAMC,OAAO,GAAG,MAAMN,GAAG,CACtBO,IADmB,CACd,CACJP,GAAG,CAACQ,WAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA3BY,EA4BNR,GAAG,CAACS,QAAJ,CAAaT,GAAG,CAACU,KAAjB,CA5BM,EA6BNV,GAAG,CAACW,cAAJ,CAAmB,CAACX,GAAG,CAACU,KAAL,CAAnB,CA7BM,EA8BNV,GAAG,CAACY,KAAJ,CAAUZ,GAAG,CAACU,KAAd,CA9BM,CADc,CAAtB;AAkCAN,IAAAA,SAAS,CAAC,4CAAD,CAAT;AACA,UAAMS,OAAO,GAAG,MAAMb,GAAG,CAACc,MAAJ,CAAWR,OAAX,CAAtB;AACA,UAAMS,KAAK,GAAGf,GAAG,CAACgB,EAAJ,CAAOH,OAAP,EAAgBI,SAAhB,CAA0BT,WAAW,IAAI;AACrD,UAAIR,GAAG,CAACgB,EAAJ,CAAOE,QAAP,CAAgBV,WAAhB,CAAJ,EAAkC;AAChCJ,QAAAA,SAAS,CAACS,OAAD,CAAT;AACAE,QAAAA,KAAK;AACN;AACF,KALa,CAAd;AAMAI,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAED,GA7CD;;AA8CA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCACI;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAgC,YAAA,OAAO,EAAER,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,sBACGF;AADH;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA9DD;;GAAMD,c;;KAAAA,c;AAgEN,eAAeA,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\"\n\nconst InitializeAcct = () => {\n  const [status, setStatus] = useState(\"Not Started\")\n  const Mint = async () => {\n    const encoded = await fcl\n      .send([\n        fcl.transaction`\n        import Profile from 0xba1132bc08f82fe2\n\n        transaction {\n          // We want the account's address for later so we can verify if the account was initialized properly\n          let address: Address\n\n          prepare(account: AuthAccount) {\n            // save the address for the post check\n            self.address = account.address\n\n            // Only initialize the account if it hasn't already been initialized\n            if (!Profile.check(self.address)) {\n              // This creates and stores the profile in the user's account\n              account.save(<- Profile.new(), to: Profile.privatePath)\n\n              // This creates the public capability that lets applications read the profile's info\n              account.link<&Profile.Base{Profile.Public}>(Profile.publicPath, target: Profile.privatePath)\n            }\n          }\n\n          // verify that the account has been initialized\n          post {\n            Profile.check(self.address): \"Account was not initialized\"\n          }\n        }\n      `,\n      fcl.proposer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.payer(fcl.authz)\n    ]\n    )\n    setStatus(\"Transaction Sent, Waiting for Confirmation\")\n    const decoded = await fcl.decode(encoded)\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(decoded)\n        unsub()\n      }\n    })\n    console.log(decoded)\n\n  };\n  return (\n    <div className=\"mint-nft\">\n        <div className=\"center\">\n        <div className=\"fancy\">\n        <div className=\"center\">\n            <button className=\"btn-primary\" onClick={Mint}>InitializeAcct</button>  \n            <div>\n              {status}\n            </div>      \n        </div>\n        </div>\n        </div>\n    </div>\n  );\n};\n\nexport default InitializeAcct;"]},"metadata":{},"sourceType":"module"}