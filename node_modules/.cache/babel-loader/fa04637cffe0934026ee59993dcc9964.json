{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ViewBalance.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GetIDs = () => {\n  _s();\n\n  const [balanceInfo, setBalanceInfo] = useState(null);\n\n  const fetchTokenData = async () => {\n    let test = await fcl.currentUser().snapshot();\n    let addrVal = await test.addr;\n    const encoded = await fcl.send([fcl.script`\n        import WildCoin from 0xProfile\n\n        pub fun main(account: Address) : UFix64?{\n\n        // Get both public account objects\n        let account1 = getAccount(account)\n\n        // Find the public Receiver capability for their Collections\n        let acct1Capability = account1.getCapability(/public/Vault)\n\n        // borrow references from the capabilities\n        let acct1Ref = acct1Capability.borrow<&WildCoin.Vault>()\n            ?? panic(\"Could not borrow account 1 Vault reference\")\n\n        return acct1Ref.balance\n        }          \n      `, fcl.args([fcl.arg(addrVal, t.Address)])]);\n    const decoded = await fcl.decode(encoded);\n    setBalanceInfo(decoded); //console.log(nftInfo)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-ids\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: fetchTokenData,\n        children: \"Get Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: balanceInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setBalanceInfo(null),\n          className: \"btn-secondary\",\n          children: \"Clear ID Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Balance: \", balanceInfo]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GetIDs, \"W+8n4yMaV3+wJftQpxqnEXWX5vU=\");\n\n_c = GetIDs;\nexport default GetIDs;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetIDs\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ViewBalance.js"],"names":["React","useState","fcl","t","GetIDs","balanceInfo","setBalanceInfo","fetchTokenData","test","currentUser","snapshot","addrVal","addr","encoded","send","script","args","arg","Address","decoded","decode"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,IAAD,CAA9C;;AACE,QAAMM,cAAc,GAAG,YAAY;AACjC,QAAIC,IAAI,GAAG,MAAMN,GAAG,CAACO,WAAJ,GAAkBC,QAAlB,EAAjB;AACA,QAAIC,OAAO,GAAG,MAAMH,IAAI,CAACI,IAAzB;AACF,UAAMC,OAAO,GAAG,MAAMX,GAAG,CACtBY,IADmB,CACd,CACJZ,GAAG,CAACa,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAlBY,EAmBNb,GAAG,CAACc,IAAJ,CAAU,CAACd,GAAG,CAACe,GAAJ,CAAQN,OAAR,EAAiBR,CAAC,CAACe,OAAnB,CAAD,CAAV,CAnBM,CADc,CAAtB;AAuBA,UAAMC,OAAO,GAAG,MAAMjB,GAAG,CAACkB,MAAJ,CAAWP,OAAX,CAAtB;AACAP,IAAAA,cAAc,CAACa,OAAD,CAAd,CA3BmC,CA4BnC;AACD,GA7BC;;AA8BF,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEZ,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAA,gBACMF,WAAW,iBACb;AAAA,gCACI;AAAQ,UAAA,OAAO,EAAE,MAAMC,cAAc,CAAC,IAAD,CAArC;AAA6C,UAAA,SAAS,EAAC,eAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,kCAAaD,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA9CD;;GAAMD,M;;KAAAA,M;AAgDN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\n\nconst GetIDs = () => {\n  const [balanceInfo, setBalanceInfo] = useState(null)\n    const fetchTokenData = async () => {\n      let test = await fcl.currentUser().snapshot()\n      let addrVal = await test.addr\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import WildCoin from 0xProfile\n\n        pub fun main(account: Address) : UFix64?{\n\n        // Get both public account objects\n        let account1 = getAccount(account)\n\n        // Find the public Receiver capability for their Collections\n        let acct1Capability = account1.getCapability(/public/Vault)\n\n        // borrow references from the capabilities\n        let acct1Ref = acct1Capability.borrow<&WildCoin.Vault>()\n            ?? panic(\"Could not borrow account 1 Vault reference\")\n\n        return acct1Ref.balance\n        }          \n      `,\n      fcl.args( [fcl.arg(addrVal, t.Address)] )\n      ])\n    \n    const decoded = await fcl.decode(encoded)\n    setBalanceInfo(decoded)\n    //console.log(nftInfo)\n  };\n  return (\n    <div className=\"nft-ids\">\n        <div className=\"center\">\n            <button className=\"btn-primary\" onClick={fetchTokenData}>Get Balance</button>        \n        </div>\n        <div>\n            { balanceInfo && \n            <div>\n                <button onClick={() => setBalanceInfo(null)} className=\"btn-secondary\">Clear ID Info</button>\n                <p>Balance: {balanceInfo}</p>\n            </div> }\n        </div>\n    </div>\n  );\n};\n\nexport default GetIDs;"]},"metadata":{},"sourceType":"module"}