{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenData = () => {\n  _s();\n\n  const showImage = async () => {\n    console.log(length(nftInfo[k].split(\"ipfs://\")));\n  };\n\n  const [nftInfo, setNftInfo] = useState(null);\n\n  const fetchTokenData = async () => {\n    const encoded = await fcl.send([fcl.script`\n        \n        import DappState from 0xf8d6e0586b0a20c7\n\n        pub fun main(account: Address, nftId: UInt64) : {String : String} {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n          return receiverRef.getMetadata(id: nftId)\n      }       \n      `, fcl.args([fcl.arg(\"0xf8d6e0586b0a20c7\", t.Address), fcl.arg(1, t.UInt64)])]);\n    const decoded = await fcl.decode(encoded);\n    setNftInfo(decoded); //console.log(nftInfo)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"token-data\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-primary\",\n        onClick: fetchTokenData,\n        children: \"Fetch Token Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), nftInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Object.keys(nftInfo).map(k => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [k, \": \", nftInfo[k], this.showImage(nftInfo[k])]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setNftInfo(null),\n        className: \"btn-secondary\",\n        children: \"Clear Token Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TokenData, \"jmGmpsNxFqySt4MoVmikJI7nO/4=\");\n\n_c = TokenData;\nexport default TokenData;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenData\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenData.js"],"names":["React","useState","fcl","t","TokenData","showImage","console","log","length","nftInfo","k","split","setNftInfo","fetchTokenData","encoded","send","script","args","arg","Address","UInt64","decoded","decode","Object","keys","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,SAAS,GAAG,YAAY;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAO,CAACC,CAAD,CAAP,CAAWC,KAAX,CAAiB,SAAjB,CAAD,CAAlB;AACD,GAFD;;AAGA,QAAM,CAACF,OAAD,EAAUG,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMY,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAG,MAAMZ,GAAG,CACtBa,IADmB,CACd,CACJb,GAAG,CAACc,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAtBY,EAuBNd,GAAG,CAACe,IAAJ,CACE,CAACf,GAAG,CAACgB,GAAJ,CAAQ,oBAAR,EAA8Bf,CAAC,CAACgB,OAAhC,CAAD,EACAjB,GAAG,CAACgB,GAAJ,CAAQ,CAAR,EAAWf,CAAC,CAACiB,MAAb,CADA,CADF,CAvBM,CADc,CAAtB;AA6BA,UAAMC,OAAO,GAAG,MAAMnB,GAAG,CAACoB,MAAJ,CAAWR,OAAX,CAAtB;AACAF,IAAAA,UAAU,CAACS,OAAD,CAAV,CA/BiC,CAgCjC;AACD,GAjCD;;AAkCA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAER,cAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAKIJ,OAAO,iBACP;AAAA,iBAEIc,MAAM,CAACC,IAAP,CAAYf,OAAZ,EAAqBgB,GAArB,CAAyBf,CAAC,IAAI;AAC5B,4BACE;AAAA,qBAAIA,CAAJ,QAASD,OAAO,CAACC,CAAD,CAAhB,EACG,KAAKL,SAAL,CAAeI,OAAO,CAACC,CAAD,CAAtB,CADH;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OAND,CAFJ,eAUE;AAAQ,QAAA,OAAO,EAAE,MAAME,UAAU,CAAC,IAAD,CAAjC;AAAyC,QAAA,SAAS,EAAC,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA7DD;;GAAMR,S;;KAAAA,S;AA+DN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\n\nconst TokenData = () => {\n  const showImage = async () => {\n    console.log(length(nftInfo[k].split(\"ipfs://\")));\n  }\n  const [nftInfo, setNftInfo] = useState(null)\n  const fetchTokenData = async () => {\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        \n        import DappState from 0xf8d6e0586b0a20c7\n\n        pub fun main(account: Address, nftId: UInt64) : {String : String} {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n          return receiverRef.getMetadata(id: nftId)\n      }       \n      `,\n      fcl.args( \n        [fcl.arg(\"0xf8d6e0586b0a20c7\", t.Address),\n        fcl.arg(1, t.UInt64)] )\n      ])\n    \n    const decoded = await fcl.decode(encoded)\n    setNftInfo(decoded)\n    //console.log(nftInfo)\n  };\n  return (\n    <div className=\"token-data\">\n      <div className=\"center\">\n        <button className=\"btn-primary\" onClick={fetchTokenData}>Fetch Token Data</button>        \n      </div>\n      {\n        nftInfo &&\n        <div>\n          {\n            Object.keys(nftInfo).map(k => {\n              return (\n                <p>{k}: {nftInfo[k]}\n                  {this.showImage(nftInfo[k])}\n                </p>\n              )\n            })\n          }\n          <button onClick={() => setNftInfo(null)} className=\"btn-secondary\">Clear Token Info</button>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default TokenData;"]},"metadata":{},"sourceType":"module"}