{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenDataMarketTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenDataMarketTest = props => {\n  _s();\n\n  const [nftInfo, setNftInfo] = useState(null); // Using this function for displaying ipfs content\n\n  function showImg(s) {\n    let arr = s.split(\"ipfs://\");\n    console.log(arr);\n\n    if (s.split(\"ipfs://\").length === 2) {\n      let link = \"https://ipfs.io/ipfs/\" + arr[1];\n      console.log(link);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-data\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"icon\",\n          src: link,\n          alt: \"Giraffe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  const fetchTokenData = async () => {\n    let testAddr = props.account;\n    console.log(\"Prop ID: \" + props.nftID);\n    let testID = parseInt(props.nftID);\n    const encoded = await fcl.send([fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address, nftId: UInt64) : {String : String} {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n          return receiverRef.getMetadata(id: nftId)\n      }       \n      `, fcl.args([fcl.arg(testAddr, t.Address), fcl.arg(testID, t.UInt64)])]);\n    console.log(\"Data Type: \" + typeof fcl.authz()); //console.log(fcl.authz().addr)\n    //let testVal = await fcl.authz()\n    //console.log(\"TestVal: \" + await testVal.addr)\n\n    const decoded = await fcl.decode(encoded);\n    console.log(\"Decode: \" + decoded);\n    setNftInfo(decoded);\n    console.log(\"NFT Info: \" + nftInfo); //console.log(\"NFT Info: \" + nftInfo[\"uri\"])\n    //console.log(nftInfo)\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n    fetchTokenData();\n    return () => {\n      fetchTokenData();\n    };\n  }, [props.account, props.nftID]);\n\n  if (nftInfo != null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"token-data\",\n      children: showImg(nftInfo[\"uri\"])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Img Not Found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 16\n  }, this);\n};\n\n_s(TokenDataMarketTest, \"IxWTcUXSO+ZRqJLxD2zfcLDLOFw=\");\n\n_c = TokenDataMarketTest;\nexport default TokenDataMarketTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenDataMarketTest\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenDataMarketTest.js"],"names":["React","useEffect","useState","fcl","t","render","TokenDataMarketTest","props","nftInfo","setNftInfo","showImg","s","arr","split","console","log","length","link","fetchTokenData","testAddr","account","nftID","testID","parseInt","encoded","send","script","args","arg","Address","UInt64","authz","decoded","decode","isMounted"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { render } from \"@testing-library/react\";\n\nconst TokenDataMarketTest = (props) => {\n  const [nftInfo, setNftInfo] = useState(null)\n\n  // Using this function for displaying ipfs content\n  function showImg(s) {\n    let arr = s.split(\"ipfs://\");\n    console.log(arr);\n    if(s.split(\"ipfs://\").length === 2){\n      let link = \"https://ipfs.io/ipfs/\"+arr[1];\n      console.log(link);\n      return(\n        <div className=\"token-data\">\n          <img id=\"icon\" src={link} alt=\"Giraffe\"></img>\n        </div>\n      )\n    }\n  }\n\n  const fetchTokenData = async () => {\n    let testAddr = props.account\n    console.log(\"Prop ID: \" + props.nftID)\n    let testID = parseInt(props.nftID)\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import DappState from 0xProfile\n\n        pub fun main(account: Address, nftId: UInt64) : {String : String} {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTReceiver)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{DappState.NFTReceiver}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n          return receiverRef.getMetadata(id: nftId)\n      }       \n      `,\n      fcl.args( \n        [fcl.arg(testAddr, t.Address),\n        fcl.arg(testID, t.UInt64)] )\n      ])\n    console.log(\"Data Type: \" + typeof(fcl.authz()))\n    //console.log(fcl.authz().addr)\n    //let testVal = await fcl.authz()\n    //console.log(\"TestVal: \" + await testVal.addr)\n    const decoded = await fcl.decode(encoded)\n    console.log(\"Decode: \" + decoded)\n    setNftInfo(decoded)\n    console.log(\"NFT Info: \" + nftInfo)\n    //console.log(\"NFT Info: \" + nftInfo[\"uri\"])\n    //console.log(nftInfo)\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n    fetchTokenData();\n    return () => {\n      fetchTokenData();\n    };\n  }, [props.account,props.nftID]);\n\n  if(nftInfo != null){\n  return (\n    \n    <div className=\"token-data\">\n      {showImg(nftInfo[\"uri\"])}\n    </div>\n  );\n  }\n  else return (<div>Img Not Found</div>)\n};\n\nexport default TokenDataMarketTest;"]},"metadata":{},"sourceType":"module"}