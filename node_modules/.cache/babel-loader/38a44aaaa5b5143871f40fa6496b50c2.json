{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/PurchaseNFT.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Purchase = props => {\n  _s();\n\n  const [status, setStatus] = useState(\"Not Started\");\n\n  const buy = async () => {\n    //let metaID = parseInt(document.getElementById(\"acctNftIDMeta\").value)\n    //let price = document.getElementById(\"acctNftPrice\").value\n    console.log(props);\n    const encoded = await fcl.send([fcl.transaction`\n        import WildNFT,WildCoin,Marketplace from 0xProfile\n\n// This transaction uses the signer's tokens to purchase an NFT\n// from the Sale collection of the seller account.\ntransaction(sellerAcct: Address, nftID: UInt64, tokenAmount: UFix64) {\n\n  // reference to the buyer's NFT collection where they\n  // will store the bought NFT\n  let collectionRef: &AnyResource{WildNFT.NFTReceiver}\n\n  // Vault that will hold the tokens that will be used to\n  // but the NFT\n  let temporaryVault: @WildCoin.Vault\n\n  prepare(acct: AuthAccount) {\n\n    // get the references to the buyer's fungible token Vault\n    // and NFT Collection Receiver\n    self.collectionRef = acct.borrow<&AnyResource{WildNFT.NFTReceiver}>(from: /storage/WildNFTCollection)\n        ?? panic(\"Could not borrow reference to the signer's nft collection\")\n\n    let vaultRef = acct.borrow<&WildCoin.Vault>(from: /storage/MainVault)\n        ?? panic(\"Could not borrow reference to the signer's vault\")\n\n    // withdraw tokens from the buyers Vault\n    self.temporaryVault <- vaultRef.withdraw(amount: tokenAmount)\n  }\n\n  execute {\n    // get the read-only account storage of the seller\n    let seller = getAccount(sellerAcct)\n\n    // get the reference to the seller's sale\n    let saleRef = seller.getCapability<&AnyResource{Marketplace.SalePublic}>(/public/NFTSale)\n        .borrow()\n        ?? panic(\"could not borrow reference to the seller's sale\")\n\n    // purchase the NFT the the seller is selling, giving them the reference\n    // to your NFT collection and giving them the tokens to buy it\n    saleRef.purchase(tokenID: nftID,\n        recipient: self.collectionRef,\n        buyTokens: <-self.temporaryVault)\n\n  }\n}\n\n      `, fcl.proposer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.payer(fcl.authz), fcl.limit(50), fcl.args([fcl.arg(props.sellerAcct, t.Address), fcl.arg(parseInt(props.nftID), t.UInt64), fcl.arg(props.tokenAmount, t.UFix64)])]);\n    setStatus(\"Transaction Sent, Waiting for Confirmation\");\n    const decoded = await fcl.decode(encoded);\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\");\n        unsub();\n      }\n    });\n    console.log(decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"btn-primary\",\n    onClick: buy,\n    children: \"Buy\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Purchase, \"1jqZiVMwxiCVyEhB0xNOkX33l5A=\");\n\n_c = Purchase;\nexport default Purchase;\n\nvar _c;\n\n$RefreshReg$(_c, \"Purchase\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/PurchaseNFT.js"],"names":["React","useState","fcl","t","Purchase","props","status","setStatus","buy","console","log","encoded","send","transaction","proposer","authz","authorizations","payer","limit","args","arg","sellerAcct","Address","parseInt","nftID","UInt64","tokenAmount","UFix64","decoded","decode","unsub","tx","subscribe","isSealed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,aAAD,CAApC;;AACA,QAAMO,GAAG,GAAG,YAAY;AACtB;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,UAAMM,OAAO,GAAG,MAAMT,GAAG,CACtBU,IADmB,CACd,CACJV,GAAG,CAACW,WAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAhDY,EAiDNX,GAAG,CAACY,QAAJ,CAAaZ,GAAG,CAACa,KAAjB,CAjDM,EAkDNb,GAAG,CAACc,cAAJ,CAAmB,CAACd,GAAG,CAACa,KAAL,CAAnB,CAlDM,EAmDNb,GAAG,CAACe,KAAJ,CAAUf,GAAG,CAACa,KAAd,CAnDM,EAoDNb,GAAG,CAACgB,KAAJ,CAAU,EAAV,CApDM,EAqDNhB,GAAG,CAACiB,IAAJ,CACE,CAAIjB,GAAG,CAACkB,GAAJ,CAAQf,KAAK,CAACgB,UAAd,EAA0BlB,CAAC,CAACmB,OAA5B,CAAJ,EACIpB,GAAG,CAACkB,GAAJ,CAAQG,QAAQ,CAAClB,KAAK,CAACmB,KAAP,CAAhB,EAA+BrB,CAAC,CAACsB,MAAjC,CADJ,EAEIvB,GAAG,CAACkB,GAAJ,CAAQf,KAAK,CAACqB,WAAd,EAA2BvB,CAAC,CAACwB,MAA7B,CAFJ,CADF,CArDM,CADc,CAAtB;AA4DApB,IAAAA,SAAS,CAAC,4CAAD,CAAT;AACA,UAAMqB,OAAO,GAAG,MAAM1B,GAAG,CAAC2B,MAAJ,CAAWlB,OAAX,CAAtB;AACA,UAAMmB,KAAK,GAAG5B,GAAG,CAAC6B,EAAJ,CAAOH,OAAP,EAAgBI,SAAhB,CAA0BnB,WAAW,IAAI;AACrD,UAAIX,GAAG,CAAC6B,EAAJ,CAAOE,QAAP,CAAgBpB,WAAhB,CAAJ,EAAkC;AAChCN,QAAAA,SAAS,CAAC,kCAAD,CAAT;AACAuB,QAAAA,KAAK;AACN;AACF,KALa,CAAd;AAMArB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,OAAZ;AAED,GA1ED;;AA2EA,sBACE;AAAQ,IAAA,SAAS,EAAC,aAAlB;AAAgC,IAAA,OAAO,EAAEpB,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAhFD;;GAAMJ,Q;;KAAAA,Q;AAkFN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\"\n\nconst Purchase = (props) => {\n  const [status, setStatus] = useState(\"Not Started\")\n  const buy = async () => {\n    //let metaID = parseInt(document.getElementById(\"acctNftIDMeta\").value)\n    //let price = document.getElementById(\"acctNftPrice\").value\n    console.log(props)\n    const encoded = await fcl\n      .send([\n        fcl.transaction`\n        import WildNFT,WildCoin,Marketplace from 0xProfile\n\n// This transaction uses the signer's tokens to purchase an NFT\n// from the Sale collection of the seller account.\ntransaction(sellerAcct: Address, nftID: UInt64, tokenAmount: UFix64) {\n\n  // reference to the buyer's NFT collection where they\n  // will store the bought NFT\n  let collectionRef: &AnyResource{WildNFT.NFTReceiver}\n\n  // Vault that will hold the tokens that will be used to\n  // but the NFT\n  let temporaryVault: @WildCoin.Vault\n\n  prepare(acct: AuthAccount) {\n\n    // get the references to the buyer's fungible token Vault\n    // and NFT Collection Receiver\n    self.collectionRef = acct.borrow<&AnyResource{WildNFT.NFTReceiver}>(from: /storage/WildNFTCollection)\n        ?? panic(\"Could not borrow reference to the signer's nft collection\")\n\n    let vaultRef = acct.borrow<&WildCoin.Vault>(from: /storage/MainVault)\n        ?? panic(\"Could not borrow reference to the signer's vault\")\n\n    // withdraw tokens from the buyers Vault\n    self.temporaryVault <- vaultRef.withdraw(amount: tokenAmount)\n  }\n\n  execute {\n    // get the read-only account storage of the seller\n    let seller = getAccount(sellerAcct)\n\n    // get the reference to the seller's sale\n    let saleRef = seller.getCapability<&AnyResource{Marketplace.SalePublic}>(/public/NFTSale)\n        .borrow()\n        ?? panic(\"could not borrow reference to the seller's sale\")\n\n    // purchase the NFT the the seller is selling, giving them the reference\n    // to your NFT collection and giving them the tokens to buy it\n    saleRef.purchase(tokenID: nftID,\n        recipient: self.collectionRef,\n        buyTokens: <-self.temporaryVault)\n\n  }\n}\n\n      `,\n      fcl.proposer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.payer(fcl.authz),\n      fcl.limit(50),\n      fcl.args( \n        [   fcl.arg(props.sellerAcct, t.Address),\n            fcl.arg(parseInt(props.nftID), t.UInt64),\n            fcl.arg(props.tokenAmount, t.UFix64)] )\n    ]\n    )\n    setStatus(\"Transaction Sent, Waiting for Confirmation\")\n    const decoded = await fcl.decode(encoded)\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\")\n        unsub()\n      }\n    })\n    console.log(decoded)\n\n  };\n  return (\n    <button className=\"btn-primary\" onClick={buy}>Buy</button>     \n  );\n};\n\nexport default Purchase;"]},"metadata":{},"sourceType":"module"}