{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/InitializeAcct.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InitializeAcct = () => {\n  _s();\n\n  const [status, setStatus] = useState(\"Not Started\");\n\n  const initialize = async () => {\n    const encoded = await fcl.send([fcl.transaction`\n        import DappState,WildCoin from 0xProfile\n\ntransaction {\n    prepare(acct: AuthAccount) {\n\n        let existintMinter <. acct.load<@DappState.NFTMinter>(from: /storage/DappStateMinter)\n        destroy existingMinter\n\n        // Delete any existing collection\n        let existing <- acct.load<@DappState.Collection>(from: /storage/NFTCollection)\n        destroy existing\n\n        // Create a new empty collection\n        let collection <- DappState.createEmptyCollection()\n\n        // store the empty NFT Collection in account storage\n        acct.save<@DappState.Collection>(<-collection, to: /storage/NFTCollection)\n\n        // create a public capability for the Collection\n        acct.link<&AnyResource{DappState.NFTReceiver}>(/public/NFTReceiver, target: /storage/NFTCollection)\n\n        let vault <- WildCoin.createEmptyVault()\n        acct.save(<-vault, to: /storage/MainVault)\n        acct.link<&WildCoin.Vault>(/public/Vault, target: /storage/MainVault)\n\n    }\n}\n      `, fcl.proposer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.payer(fcl.authz), fcl.limit(50)]);\n    setStatus(\"Transaction Sent, Waiting for Confirmation\");\n    const decoded = await fcl.decode(encoded);\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\");\n        unsub();\n      }\n    });\n    console.log(decoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fancy\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-primary\",\n            onClick: initialize,\n            children: \"Initialize Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InitializeAcct, \"1jqZiVMwxiCVyEhB0xNOkX33l5A=\");\n\n_c = InitializeAcct;\nexport default InitializeAcct;\n\nvar _c;\n\n$RefreshReg$(_c, \"InitializeAcct\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/InitializeAcct.js"],"names":["React","useState","fcl","t","InitializeAcct","status","setStatus","initialize","encoded","send","transaction","proposer","authz","authorizations","payer","limit","decoded","decode","unsub","tx","subscribe","isSealed","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,aAAD,CAApC;;AACA,QAAMM,UAAU,GAAG,YAAY;AAC7B,UAAMC,OAAO,GAAG,MAAMN,GAAG,CACtBO,IADmB,CACd,CACJP,GAAG,CAACQ,WAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA7BY,EA8BNR,GAAG,CAACS,QAAJ,CAAaT,GAAG,CAACU,KAAjB,CA9BM,EA+BNV,GAAG,CAACW,cAAJ,CAAmB,CAACX,GAAG,CAACU,KAAL,CAAnB,CA/BM,EAgCNV,GAAG,CAACY,KAAJ,CAAUZ,GAAG,CAACU,KAAd,CAhCM,EAiCNV,GAAG,CAACa,KAAJ,CAAU,EAAV,CAjCM,CADc,CAAtB;AAqCAT,IAAAA,SAAS,CAAC,4CAAD,CAAT;AACA,UAAMU,OAAO,GAAG,MAAMd,GAAG,CAACe,MAAJ,CAAWT,OAAX,CAAtB;AACA,UAAMU,KAAK,GAAGhB,GAAG,CAACiB,EAAJ,CAAOH,OAAP,EAAgBI,SAAhB,CAA0BV,WAAW,IAAI;AACrD,UAAIR,GAAG,CAACiB,EAAJ,CAAOE,QAAP,CAAgBX,WAAhB,CAAJ,EAAkC;AAChCJ,QAAAA,SAAS,CAAC,kCAAD,CAAT;AACAY,QAAAA,KAAK;AACN;AACF,KALa,CAAd;AAMAI,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAED,GAhDD;;AAiDA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACA;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,kCACI;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAgC,YAAA,OAAO,EAAET,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,sBACGF;AADH;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjED;;GAAMD,c;;KAAAA,c;AAmEN,eAAeA,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\"\n\nconst InitializeAcct = () => {\n  const [status, setStatus] = useState(\"Not Started\")\n  const initialize = async () => {\n    const encoded = await fcl\n      .send([\n        fcl.transaction`\n        import DappState,WildCoin from 0xProfile\n\ntransaction {\n    prepare(acct: AuthAccount) {\n\n        let existintMinter <. acct.load<@DappState.NFTMinter>(from: /storage/DappStateMinter)\n        destroy existingMinter\n\n        // Delete any existing collection\n        let existing <- acct.load<@DappState.Collection>(from: /storage/NFTCollection)\n        destroy existing\n\n        // Create a new empty collection\n        let collection <- DappState.createEmptyCollection()\n\n        // store the empty NFT Collection in account storage\n        acct.save<@DappState.Collection>(<-collection, to: /storage/NFTCollection)\n\n        // create a public capability for the Collection\n        acct.link<&AnyResource{DappState.NFTReceiver}>(/public/NFTReceiver, target: /storage/NFTCollection)\n\n        let vault <- WildCoin.createEmptyVault()\n        acct.save(<-vault, to: /storage/MainVault)\n        acct.link<&WildCoin.Vault>(/public/Vault, target: /storage/MainVault)\n\n    }\n}\n      `,\n      fcl.proposer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.payer(fcl.authz),\n      fcl.limit(50)\n    ]\n    )\n    setStatus(\"Transaction Sent, Waiting for Confirmation\")\n    const decoded = await fcl.decode(encoded)\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\")\n        unsub()\n      }\n    })\n    console.log(decoded)\n\n  };\n  return (\n    <div className=\"mint-nft\">\n        <div className=\"center\">\n        <div className=\"fancy\">\n        <div className=\"center\">\n            <button className=\"btn-primary\" onClick={initialize}>Initialize Account</button>  \n            <div>\n              {status}\n            </div>      \n        </div>\n        </div>\n        </div>\n    </div>\n  );\n};\n\nexport default InitializeAcct;"]},"metadata":{},"sourceType":"module"}