{"ast":null,"code":"var _jsxFileName = \"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayMintPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayMintPage = () => {\n  _s();\n\n  const [mintUsers, setMintUsers] = useState(false);\n\n  const checkAccount = async () => {\n    let snapshot = await fcl.currentUser().snapshot();\n    console.log(\"Snapshot: \" + snapshot);\n    let addrVal = await snapshot.addr;\n    console.log(\"addrVal: \" + addrVal);\n    let profile = process.env.REACT_APP_CONTRACT_PROFILE;\n    let code = `\n    import WildNFT from 0xProfile\n\n    pub fun main(addr: Address) : Bool {\n    let account = getAccount(` + profile + `)\n    let capability = account.getCapability(/public/AccessList) \n    let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n        ?? panic(\"Could not borrow account access list reference\")\n    let minterList = ref.getAccounts()\n\n    return minterList.contains(addr)\n  }`;\n\n    if (addrVal != null) {\n      const encoded = await fcl.send([fcl.script`${code}`, fcl.args([fcl.arg(addrVal, t.Address)])]);\n      const decoded = await fcl.decode(encoded);\n      console.log(\"Decode: \" + decoded);\n      setMintUsers(decoded);\n    }\n  };\n\n  useEffect(() => {\n    checkAccount();\n  }, [mintUsers]);\n\n  if (mintUsers) {\n    console.log(\"User Approved\");\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: {\n          pathname: \"/MetaMintPage\",\n          state: {\n            auth: true\n          }\n        },\n        children: \"Mint an NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(DisplayMintPage, \"UDuadsqxMNTEBnLJNHvR4n4KYds=\");\n\n_c = DisplayMintPage;\nexport default DisplayMintPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayMintPage\");","map":{"version":3,"sources":["/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayMintPage.js"],"names":["React","useEffect","useState","fcl","t","Link","DisplayMintPage","mintUsers","setMintUsers","checkAccount","snapshot","currentUser","console","log","addrVal","addr","profile","process","env","REACT_APP_CONTRACT_PROFILE","code","encoded","send","script","args","arg","Address","decoded","decode","pathname","state","auth"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMO,YAAY,GAAG,YAAY;AAC7B,QAAIC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,WAAJ,GAAkBD,QAAlB,EAArB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAeH,QAA3B;AACA,QAAII,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAA7B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,OAA1B;AACA,QAAIE,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,0BAA1B;AACA,QAAIC,IAAI,GAAI;AAChB;AACA;AACA;AACA,8BAJe,GAIgBJ,OAJhB,GAIyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,IAXI;;AAYA,QAAGF,OAAO,IAAI,IAAd,EAAmB;AACnB,YAAMO,OAAO,GAAG,MAAMlB,GAAG,CACtBmB,IADmB,CACd,CACJnB,GAAG,CAACoB,MAAO,GAAEH,IAAK,EADd,EACgBjB,GAAG,CAACqB,IAAJ,CACpB,CAACrB,GAAG,CAACsB,GAAJ,CAAQX,OAAR,EAAiBV,CAAC,CAACsB,OAAnB,CAAD,CADoB,CADhB,CADc,CAAtB;AAKE,YAAMC,OAAO,GAAG,MAAMxB,GAAG,CAACyB,MAAJ,CAAWP,OAAX,CAAtB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAac,OAAzB;AACAnB,MAAAA,YAAY,CAACmB,OAAD,CAAZ;AACD;AACJ,GA5BD;;AA6BA1B,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACF,SAAD,CAFM,CAAT;;AAGA,MAAGA,SAAH,EAAa;AACXK,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,wBACE;AAAA,6BAAI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE;AACZgB,UAAAA,QAAQ,EAAE,eADE;AAEZC,UAAAA,KAAK,EAAE;AAACC,YAAAA,IAAI,EAAE;AAAP;AAFK,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YADF;AAMD,GARD,MASI;AACF,WAAO,IAAP;AACD;AACA,CA/CD;;GAAMzB,e;;KAAAA,e;AAiDN,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport {Link} from 'react-router-dom';\n\nconst DisplayMintPage = () => {\nconst [mintUsers, setMintUsers] = useState(false)\n\nconst checkAccount = async () => {\n    let snapshot = await fcl.currentUser().snapshot()\n    console.log(\"Snapshot: \" + snapshot)\n    let addrVal = await snapshot.addr\n    console.log(\"addrVal: \" + addrVal)\n    let profile = process.env.REACT_APP_CONTRACT_PROFILE\n    let code = `\n    import WildNFT from 0xProfile\n\n    pub fun main(addr: Address) : Bool {\n    let account = getAccount(`+profile+`)\n    let capability = account.getCapability(/public/AccessList) \n    let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n        ?? panic(\"Could not borrow account access list reference\")\n    let minterList = ref.getAccounts()\n\n    return minterList.contains(addr)\n  }`\n    if(addrVal != null){\n    const encoded = await fcl\n      .send([\n        fcl.script`${code}`,fcl.args( \n        [fcl.arg(addrVal, t.Address)])\n      ])\n      const decoded = await fcl.decode(encoded)\n      console.log(\"Decode: \" + decoded)\n      setMintUsers(decoded)\n    }\n};\nuseEffect(() => {\n  checkAccount();\n}, [mintUsers]);\nif(mintUsers){\n  console.log(\"User Approved\")\n  return (\n    <li><Link to={{\n      pathname: \"/MetaMintPage\", \n      state: {auth: true}\n    }}>Mint an NFT</Link></li>\n  )\n}\nelse{\n  return null\n}\n};\n\nexport default DisplayMintPage;"]},"metadata":{},"sourceType":"module"}