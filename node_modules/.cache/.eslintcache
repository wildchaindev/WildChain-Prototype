[{"/Users/minh/Desktop/TestSite/wc-prototype/src/index.js":"1","/Users/minh/Desktop/TestSite/wc-prototype/src/App.js":"2","/Users/minh/Desktop/TestSite/wc-prototype/src/reportWebVitals.js":"3","/Users/minh/Desktop/TestSite/wc-prototype/src/config.js":"4","/Users/minh/Desktop/TestSite/wc-prototype/src/AuthCluster.js":"5","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/MainPage.js":"6","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/AcctPage.js":"7","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/AcctNavigation.js":"8","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/GetIDs.js":"9","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/InitializeAcct.js":"10","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/ZooPage.js":"11","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayNFTGrid.js":"12","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ViewBalance.js":"13","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayZooGrid.js":"14","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ErrorBoundary.js":"15","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ListForSale.js":"16","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/Marketplace.js":"17","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js":"18","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/MetaMintPage.js":"19","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/NavBar.js":"20","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayMintPage.js":"21","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/PurchaseNFT.js":"22","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenDataMarketSell.js":"23","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/Footer.js":"24","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ProfileBar.js":"25","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/SanDiegoZoo.js":"26","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/BronxZoo.js":"27","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/ElmwoodParkZoo.js":"28","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/OaklandZoo.js":"29"},{"size":611,"mtime":1623950998429,"results":"30","hashOfConfig":"31"},{"size":2643,"mtime":1626435231512,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1623670551659,"results":"33","hashOfConfig":"31"},{"size":229,"mtime":1624200229032,"results":"34","hashOfConfig":"31"},{"size":911,"mtime":1625773014272,"results":"35","hashOfConfig":"31"},{"size":600,"mtime":1626139975891,"results":"36","hashOfConfig":"31"},{"size":2541,"mtime":1626434717308,"results":"37","hashOfConfig":"31"},{"size":2639,"mtime":1626170144456,"results":"38","hashOfConfig":"31"},{"size":1711,"mtime":1626170144460,"results":"39","hashOfConfig":"31"},{"size":2837,"mtime":1625592290494,"results":"40","hashOfConfig":"31"},{"size":2109,"mtime":1626170144458,"results":"41","hashOfConfig":"31"},{"size":2815,"mtime":1625770542633,"results":"42","hashOfConfig":"31"},{"size":1597,"mtime":1625770491334,"results":"43","hashOfConfig":"31"},{"size":2789,"mtime":1626170144459,"results":"44","hashOfConfig":"31"},{"size":620,"mtime":1625074822707,"results":"45","hashOfConfig":"31"},{"size":2529,"mtime":1625824737186,"results":"46","hashOfConfig":"31"},{"size":394,"mtime":1625773902035,"results":"47","hashOfConfig":"31"},{"size":4654,"mtime":1626434330725,"results":"48","hashOfConfig":"31"},{"size":10267,"mtime":1626435247412,"results":"49","hashOfConfig":"31"},{"size":915,"mtime":1626139975894,"results":"50","hashOfConfig":"31"},{"size":1490,"mtime":1626434737737,"results":"51","hashOfConfig":"31"},{"size":2890,"mtime":1626365047005,"results":"52","hashOfConfig":"31"},{"size":2869,"mtime":1625769711045,"results":"53","hashOfConfig":"31"},{"size":189,"mtime":1626139975893,"results":"54","hashOfConfig":"31"},{"size":244,"mtime":1626139975894,"results":"55","hashOfConfig":"31"},{"size":1055,"mtime":1626365186931,"results":"56","hashOfConfig":"31"},{"size":1055,"mtime":1626170144462,"results":"57","hashOfConfig":"31"},{"size":1069,"mtime":1626448784646,"results":"58","hashOfConfig":"31"},{"size":1055,"mtime":1626448268279,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"6qjr24",{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/minh/Desktop/TestSite/wc-prototype/src/index.js",[],["129","130"],"/Users/minh/Desktop/TestSite/wc-prototype/src/App.js",["131","132","133"],"import React, { useEffect, useState } from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link, Redirect} from 'react-router-dom';\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport './App.css';\nimport MainPage from './pages/MainPage';\nimport AcctPage from './pages/AcctPage';\nimport ZooPage from './pages/ZooPage';\nimport Marketplace from './pages/Marketplace';\nimport MetaMintPage from './pages/MetaMintPage';\nimport NavBar from './pages/components/NavBar';\nimport Footer from './pages/components/Footer';\nimport SanDiegoZoo from './pages/zoopages/SanDiegoZoo';\nimport BronxZoo from './pages/zoopages/BronxZoo';\nimport ElmZoo from './pages/zoopages/ElmwoodParkZoo';\nimport OakZoo from './pages/zoopages/OaklandZoo';\n\nfunction App() {\n  const [auth, setAuth] = useState(false)\n  const checkAccount = async () => {\n    let snapshot = await fcl.currentUser().snapshot()\n    console.log(\"Snapshot: \" + snapshot)\n    let addrVal = await snapshot.addr\n    console.log(\"addrVal: \" + addrVal)\n    let profile = process.env.REACT_APP_CONTRACT_PROFILE\n    let code =`\n    import WildNFT from 0xProfile\n  \n    pub fun main(addr: Address) : Bool {\n    let account = getAccount(`+profile+`)\n    let capability = account.getCapability(/public/AccessList) \n    let ref = capability.borrow<&{WildNFT.NFTMinterAccessPub}>() \n        ?? panic(\"Could not borrow account access list reference\")\n    let minterList = ref.getAccounts()\n\n    return minterList.contains(addr)\n  }`\n    if(addrVal != null){\n    const encoded = await fcl\n      .send([\n        fcl.script`${code}`,fcl.args( \n        [fcl.arg(addrVal, t.Address)])\n      ])\n      const decoded = await fcl.decode(encoded)\n      console.log(\"Mint Auth: \" + decoded)\n      setAuth(decoded)\n    }\n  };\n  useEffect(() => {\n  checkAccount();\n  }, [auth]);\n\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Route exact path=\"/\" component={MainPage}></Route>\n      <Route exact path=\"/Marketplace\" component={Marketplace}></Route>\n      <Route exact path=\"/AcctPage\" render={(props) => <AcctPage globalStore={\"test\"} {...props} /> }></Route>\n      <Route exact path=\"/ZooPage\" component={ZooPage}></Route>\n      <Route exact path=\"/MetaMintPage\" render = {() => (auth ? (<MetaMintPage/>) : (<Redirect to=\"/\" />))}></Route>\n      <Route exact path=\"/zoos/SanDiego\" component={SanDiegoZoo}></Route>\n      <Route exact path=\"/zoos/ElmwoodPark\" component={ElmZoo}></Route>\n      <Route exact path=\"/zoos/Oakland\" component={OakZoo}></Route>\n      <Route exact path=\"/zoos/Bronx\" component={BronxZoo}></Route>\n      <Footer />\n    </div>\n  );\n}\nexport default App;","/Users/minh/Desktop/TestSite/wc-prototype/src/reportWebVitals.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/config.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/AuthCluster.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/MainPage.js",["134"],"import React, { useState } from 'react' \nimport AcctNavigation from \"./AcctNavigation\";\n\nclass MainPage extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = { };\n    }\n    render() {\n        return(\n      <div >\n        <section class=\"welcome-title\">\n          <h2>Wildchain Prototype</h2>\n        </section>\n        <section class=\"navigate-by-zoos\">\n          <div >\n            <div id=\"sdbutton\">\n              <AcctNavigation></AcctNavigation>   \n            </div>\n          </div>\n        </section>\n      </div>)\n    ;\n    }\n}\n\nexport default MainPage;\n","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/AcctPage.js",["135"],"import React from 'react' \n/*import sd from \"../assets/img/ZooLogos/SanDiego.png\";\nimport bronx from \"../assets/img/ZooLogos/bronx.png\";\nimport oak from \"../assets/img/ZooLogos/Oakland.png\";\nimport elm from \"../assets/img/ZooLogos/Elmswood.png\";\nimport { LitElement, html, customElement, property } from \"lit-element\";\nimport { useLocation } from \"react-router-dom\";*/\n\nimport ViewBalance from './components/ViewBalance';\nimport InitializeAcct from './components/InitializeAcct';\nimport DisplayNFTGrid from './components/DisplayNFTGrid';\nimport ListForSale from './components/ListForSale';\n\n\nclass AcctPage extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {nftIDMeta: \"1\", price:\"10.0\"};\n    }\n\n    onInputchange(elementId) {\n      let idValue = document.getElementById(elementId).value\n      switch(elementId){\n      case \"acctNftIDMeta\":\n        this.setState({\n          nftIDMeta: idValue\n        });\n        break\n      case \"acctNftPrice\":\n        this.setState({\n          price: idValue\n        });\n        break\n      }\n    }\n    \n    render() {\n      return(\n      <div>\n          <h2>Account Page</h2>\n          <div className=\"row\">\n            <div className=\"column\">\n              <InitializeAcct></InitializeAcct>\n            <div className=\"center\">\n            <div className=\"fancy\">\n            <div className=\"center\">\n            <label form=\"acctNftIDMeta\" className=\"mt-3\"><b>NFT ID</b></label><br/>\n                    <input\n                      type=\"text\"\n                      id=\"acctNftIDMeta\"\n                      data-field=\"id\"\n                      value={this.state.nftIDMeta}\n                      onChange={() => this.onInputchange(\"acctNftIDMeta\")}/><br/>\n            <label form=\"acctNftPrice\" className=\"mt-3\"><b>NFT Price</b></label><br/>\n                    <input\n                      type=\"text\"\n                      id=\"acctNftPrice\"\n                      data-field=\"id\"\n                      value={this.state.price}\n                      onChange={() => this.onInputchange(\"acctNftPrice\")}/>\n            <ListForSale></ListForSale>\n            </div>\n            </div>\n            </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"column\">\n                <DisplayNFTGrid></DisplayNFTGrid>\n              </div>\n              <div className=\"column\">\n                <ViewBalance></ViewBalance>\n              </div>\n            </div>\n          </div>\n      </div>)\n    ;\n    }\n}\n\nexport default AcctPage;\n","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/AcctNavigation.js",["136"],"import React from 'react' \nimport { useHistory } from \"react-router-dom\";\nimport sd from \"../assets/img/ZooLogos/SanDiego.png\";\nimport bronx from \"../assets/img/ZooLogos/bronx.png\";\nimport oak from \"../assets/img/ZooLogos/Oakland.png\";\nimport elm from \"../assets/img/ZooLogos/Elmswood.png\";\n\nfunction AcctNavigation() {\n    let history = useHistory();\n\n    // When logo gets clicked, push AcctPage with tag for Account/Logo being used\n    function handleClick(sourceTag, address) {\n        history.push(\"/ZooPage\", {imgSrc: sourceTag, account: address})\n        //console.log(sourceTag)\n    }\n  \n    return (\n     <div>\n         <div class=\"zoo-card\">\n             <button type=\"button\">\n                 <a href=\"/zoos/SanDiego\">\n                        <img \n                            src={sd} \n                            id=\"icon\"\n                            alt=\"SDZooLogo\" \n                            title=\"SDZoo\"> \n                        </img>\n                 </a>\n             </button>\n             <div class=\"zoo-card-label\">\n                 <h4>San Diego Zoo</h4>\n             </div>\n         </div>\n         <div class=\"zoo-card\">\n             <button type=\"button\">\n                 <a href=\"/zoos/Bronx\">\n                        <img \n                            src={bronx} \n                            id=\"icon\"\n                            alt=\"BronxZooLogo\" \n                            title=\"BronxZoo\"> \n                        </img>\n                 </a>\n             </button>\n             <div class=\"zoo-card-label\">\n                 <h4>Bronx Zoo</h4>\n             </div>\n         </div>\n         <div class=\"zoo-card\">\n             <button type=\"button\">\n                 <a href=\"/zoos/Oakland\">\n                    <img \n                        src={oak} \n                        id=\"icon\"\n                        alt=\"OakZooLogo\" \n                        title=\"OakZoo\"> \n                    </img>\n                 </a>\n             </button>\n             <div class=\"zoo-card-label\">\n                 <h4>Oakland Zoo</h4>\n             </div>\n         </div>\n         <div class=\"zoo-card\">\n             <button type=\"button\">\n                 <a href=\"/zoos/ElmwoodPark\">\n                    <img \n                        src={elm} \n                        id=\"icon\"\n                        alt=\"ElmZooLogo\" \n                        title=\"ElmZoo\"> \n                    </img>\n                 </a>\n             </button>\n             <div class=\"zoo-card-label\">\n                 <h4>Elmwood Park Zoo</h4>\n             </div>\n         </div>\n\n     </div>\n    );\n  }\n  export default AcctNavigation;","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/GetIDs.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/InitializeAcct.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/ZooPage.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayNFTGrid.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ViewBalance.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayZooGrid.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ErrorBoundary.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ListForSale.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/Marketplace.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/MarketGrid.js",["137"],"import React, { useEffect, useState } from \"react\";\nimport * as sdk from \"@onflow/sdk\";\nimport Modal from 'react-modal';\nimport TokenDataMarketSell from \"./TokenDataMarketSell\";\nimport Purchase from \"./PurchaseNFT\";\n\n// Testnet Access Node\nconst node = \"https://access-testnet.onflow.org\";\nconst EVENT_MOMENT_LISTED = \"A.\"+process.env.REACT_APP_CONTRACT_PROFILE.replace(\"0x\",\"\")+\".Marketplace.ForSale\";\nconst FETCH_INTERVAL = 1000;\n\nvar SHIFT = 200;\nlet isSealed = false;\nlet displayAmount = 9;\n\nfunction union(setA, setB) {\n  var _union = new Set(setA);\n  for (var elem of setB) {\n    _union.add(elem);\n  }\n  return _union;\n}\n\nexport default function MarketGrid() {\n  const [lastBlock, setLastBlock] = useState(0);\n  const [eventIDs, setEventIdS] = useState(new Set());\n  const [eventsDictionary, setEventsDictionary] = useState({});\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [displaySeller, setSeller] = useState(\"\");\n  const [displayPrice, setPrice] = useState(\"\");\n  const [displayId, setId] = useState(\"\");\n  const [displayMetadata, setMetadata] = useState(null);\n\n  Modal.setAppElement(document.getElementById('marketplace'));\n\n  function openModal(seller, price, id, metadata) {\n    //displaySeller = seller;\n    //displayPrice = price;\n    setSeller(seller);\n    setPrice(price);\n    setId(id);\n    setMetadata(metadata);\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {\n    // references are now sync'd and can be accessed.\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function loadMarket() {\n    if (events.length < displayAmount){\n      return <div>Loading Marketplace...</div>\n    }\n  }\n\n  const fetchEvents = async (height) => {\n    if (height == 0) {\n      const latestBlock = await sdk.send(\n        await sdk.build([sdk.getBlock(isSealed)]),\n        {\n          node\n        }\n      );\n      //console.log(latestBlock);\n      height = latestBlock.block.height;\n    }\n    //console.log(lastBlock);\n    //console.log(\"Events Found: \" + Object.keys(eventsDictionary).length)\n    let end = height;\n    let start = height-SHIFT;\n\n    // fetch events\n    const response = await sdk.send(\n      await sdk.build([sdk.getEventsAtBlockHeightRange(EVENT_MOMENT_LISTED, start, end)]),\n      { node }\n    );\n\n    const { events } = response;\n\n    if (events.length > 0) {\n      const newSet = new Set(\n        events.map((event) => {\n          const id = event.payload.value.fields[0].value.value;\n          eventsDictionary[id] = event;\n          return id;\n        })\n      );\n      const newEvents = union(eventIDs, newSet);\n      setEventsDictionary(eventsDictionary);\n      setEventIdS(newEvents);\n    }\n\n    // update last processed block\n    setLastBlock(start);\n  };\n\n  useEffect(() => {\n    if(Object.keys(eventsDictionary).length < displayAmount){\n      const interval = setInterval(fetchEvents(lastBlock), FETCH_INTERVAL);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  });\n\n  const events = Array.from(eventIDs);\n\n  return (\n    \n    <div id=\"marketplace\" className=\"Marketplace\">\n      {console.log(\"Memory Test\")}\n      <div className=\"center\">\n        <div className=\"row\">\n      {loadMarket()}\n      {events.map((eventId) => {\n            const event = eventsDictionary[eventId];\n            const payload = event.payload.value.fields;\n            const [id, price, seller] = payload;\n            const nftId = id.value.value;\n            const nftPrice = price.value.value;\n            //console.log(nftPrice);\n            const nftSeller = seller.value.value.value;\n            const nftMetadata = <TokenDataMarketSell account={nftSeller} nftID={nftId}></TokenDataMarketSell>\n            return (\n              <div className=\"column\"><button onClick={() => openModal(nftSeller,nftPrice, nftId, nftMetadata)}>\n                {nftMetadata}\n              </button>\n              <Modal\n                isOpen={modalIsOpen}\n                onAfterOpen={afterOpenModal}\n                onRequestClose={closeModal}\n              >\n                <h2>NFT</h2>\n                <button onClick={closeModal}>close</button>\n                <Purchase sellerAcct={displaySeller} nftID={displayId} tokenAmount={displayPrice}></Purchase>\n                <div>\n                  {displayMetadata}\n                  <div className=\"column\">\n                    Seller: {displaySeller}\n                    <br/>\n                    Price: {displayPrice}\n                    <br/>\n                    ID: {displayId}\n                  </div>\n                </div>\n              </Modal></div>\n            );\n          })\n        }\n          </div>\n      </div>     \n    </div>\n  );\n}\n","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/MetaMintPage.js",["138","139","140","141"],"import React, { useEffect, useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\"\n\nvar current = new Date();\nvar dd = String(current.getDate()).padStart(2, '0');\nvar mm = String(current.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = current.getFullYear();\ncurrent = mm + '/' + dd + '/' + yyyy;\nlet stateArr = [\n'author', \n'caption', \n'lang',\n'dateMediaPost',\n'rtCount',\n'fvCount',\n'idStr',\n'uri',\n'dateMint',\n'rarity'];\n\nclass MetaMintPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            author: \"Type author's name here\", \n            caption:\"Type Tweet's caption here\",\n            lang:\"eng\",\n            dateMediaPost:\"Enter Date Here\",\n            rtCount:\"Type Tweet's retweet count here\",\n            fvCount:\"Type Tweet's favorite count here\",\n            idStr: \"Type Tweet's ID String here\",\n            uri: \"Type Tweet's URI Address from IPFS here\",\n            dateMint: current,\n            rarity: \"na\",\n            auth: false};\n      }\n\n    Mint = async () => {\n        let profile = process.env.REACT_APP_CONTRACT_PROFILE\n        let code = `\n        import WildNFT from 0xProfile\n\n        transaction(customData: {String : String}) {\n            // If the person executing this tx doesn't have access to the\n            // resource, then the tx will fail. Thus, references...\n            let receiverRef: &{WildNFT.NFTReceiver}\n            let minterRef: &{WildNFT.NFTAuthMint}\n        \n            // ...in \"prepare\", the code borrows capabilities on the two resources referenced above,\n            // takes in information of the person executing the tx, and validates.\n            prepare(acct: AuthAccount) {\n                let admin = getAccount(`+profile+`)\n                self.receiverRef = acct.getCapability<&{WildNFT.NFTReceiver}>(/public/NFTReceiver)\n                    .borrow()\n                    ?? panic(\"Could not borrow receiver reference.\")\n    \n                self.minterRef = admin.getCapability<&{WildNFT.NFTAuthMint}>(/public/AuthMint)\n                    .borrow()\n                    ?? panic(\"Could not borrow auth minter reference.\")\n        \n                let metadata : {String : String} = customData\n        \n                // This is where the NFT resource itself is created\n                self.minterRef.authMint(authUser: acct)\n                let newNFT <- acct.load<@WildNFT.NFT>(from: /storage/MintedNFT)!\n        \n                // This is where the metadata comes into the picture to join with the new NFT!\n                self.receiverRef.deposit(token: <-newNFT, metadata: metadata)\n        \n                log(\"NFT has been minted and deposited to Account's Collection\")\n            }\n        }`\n        /*let customData = {}\n        stateArr.forEach(el => customData[el] = this.state[el])\n        console.log(\"Dictionary Key: \" + typeof(Object.keys(customData)[0]))\n        console.log(\"Dictionary Value: \" + typeof(customData[\"author\"]))*/\n        const encoded = await fcl\n          .send([\n            fcl.transaction`${code}`,\n            fcl.proposer(fcl.authz),\n            fcl.authorizations([fcl.authz]),\n            fcl.payer(fcl.authz),\n            fcl.limit(50),\n            fcl.args( \n            [ fcl.arg(\n                [{key: \"author\", value: this.state.author},\n                {key: \"caption\", value: this.state.caption},\n                {key: \"lang\", value: this.state.lang},\n                {key: \"dateMediaPost\", value: this.state.dateMediaPost},\n                {key: \"rtCount\", value: this.state.rtCount},\n                {key: \"fvCount\", value: this.state.fvCount},\n                {key: \"idStr\", value: this.state.idStr},\n                {key: \"uri\", value: this.state.uri},\n                {key: \"dateMint\", value: this.state.dateMint},\n                {key: \"rarity\", value: this.state.rarity}], \n                t.Dictionary({key: t.String, value: t.String}))\n            ])  \n        ])     \n        const decoded = await fcl.decode(encoded)\n        console.log(decoded)\n    };\n\n    onInputchange(elementId) {\n        let idValue = document.getElementById(elementId).value\n        switch(elementId){\n        case \"author\":\n          this.setState({\n            author: idValue\n          });\n          console.log(this.state.author);\n          break\n        case \"caption\":\n          this.setState({\n            caption: idValue\n          });\n          console.log(this.state.caption);\n          break\n        case \"lang\":\n          this.setState({\n            lang: idValue\n          });\n          console.log(this.state.lang);\n          break\n        case \"dateMediaPost\":\n          this.setState({\n            dateMediaPost: idValue\n          });\n          console.log(this.state.dateMediaPost);\n          break\n        case \"rtCount\":\n          this.setState({\n            rtCount: idValue\n          });\n          console.log(this.state.rtCount);\n          break\n        case \"fvCount\":\n          this.setState({\n            fvCount: idValue\n          });\n          console.log(this.state.fvCount);\n          break\n        case \"idStr\":\n          this.setState({\n            idStr: idValue\n          });\n          console.log(this.state.idStr);\n          break\n        case \"uri\":\n          this.setState({\n            uri: idValue\n          });\n          console.log(this.state.uri);\n          break\n        case \"dateMint\":\n          this.setState({\n            dateMint: idValue\n          });\n          console.log(this.state.dateMint);\n          break\n        case \"rarity\":\n          this.setState({\n            rarity: idValue\n          });\n          console.log(this.state.rarity);\n          break\n        }      \n      }\n\n    render() {\n      return(\n      <div>\n          <h2>Metadata Minting Page</h2>\n          <div class=\"pageCenter\" id=\"pageCenter\">\n                <div class=\"metaEnter\" id=\"WildMetaEnter\">\n                    <label form=\"author\">Author:</label>\n                    <input \n                        type=\"text\" \n                        id=\"author\" \n                        name=\"author\" \n                        value={this.state.author}\n                        onChange={() => this.onInputchange(\"author\")}></input>\n                    <br></br>\n                    <label form=\"caption\">Caption:</label>\n                    <input \n                        type=\"text\" \n                        id=\"caption\" \n                        name=\"caption\" \n                        value={this.state.caption}\n                        onChange={() => this.onInputchange(\"caption\")}></input>\n                    <br></br>\n                    <label form=\"lang\">Language:</label>\n                    <select \n                    name=\"lang\" \n                    id=\"lang\" \n                    value={this.state.lang}\n                    onChange={() => this.onInputchange(\"lang\")}>\n                        <option value=\"eng\">English</option>\n                        <option value=\"span\">Español</option>\n                        <option value=\"fren\">Francais</option>\n                        <option value=\"kor\">한국어</option>\n                    </select>\n                    <br></br>\n                    <label form=\"dateMediaPost\">Date Media Posted:</label>\n                    <input \n                        type=\"text\" \n                        id=\"dateMediaPost\" \n                        name=\"date-media\" \n                        value={this.state.dateMediaPost}\n                        onChange={() => this.onInputchange(\"dateMediaPost\")}></input>\n                    <br></br>\n                    <label form=\"rtCount\">Retweet Count:</label>\n                    <input \n                        type=\"text\" \n                        id=\"rtCount\" \n                        name=\"rtCount\" \n                        value={this.state.rtCount}\n                        onChange={() => this.onInputchange(\"rtCount\")}></input>\n                    <br></br>\n                    <label form=\"fvCount\">Favorite Count:</label>\n                    <input \n                        type=\"text\" \n                        id=\"fvCount\" \n                        name=\"fvCount\" \n                        value={this.state.fvCount}\n                        onChange={() => this.onInputchange(\"fvCount\")}></input>\n                    <br></br>\n                    <label form=\"idStr\">ID String:</label>\n                    <input \n                        type=\"text\" \n                        id=\"idStr\" \n                        name=\"idStr\" \n                        value={this.state.idStr}\n                        onChange={() => this.onInputchange(\"idStr\")}></input>\n                    <br></br>\n                    <label form=\"uri\">URI Address:</label>\n                    <input \n                        type=\"text\" \n                        id=\"uri\" \n                        name=\"uri\" \n                        value={this.state.uri}\n                        onChange={() => this.onInputchange(\"uri\")}></input>\n                    <br></br>\n                    <label form=\"dateMint\">Date NFT Minted:</label>\n                    <input \n                        type=\"text\" \n                        id=\"dateMint\" \n                        name=\"dateMint\" \n                        value={this.state.dateMint}\n                        onChange={() => this.onInputchange(\"dateMint\")}></input>\n                    <br></br>\n                    <label form=\"rarity\">Rarity Level:</label>\n                    <select \n                    name=\"rarity\" \n                    id=\"rarity\"\n                    value={this.state.rarity}\n                    onChange={() => this.onInputchange(\"rarity\")}>\n                        <option value=\"na\">Select Rarity</option>\n                        <option value=\"low\">Low Rarity</option>\n                        <option value=\"med\">Medium Rarity</option>\n                        <option value=\"high\">High Rarity</option>\n                        <option value=\"max\">Extreme Rarity</option>\n                    </select>\n                    <br></br>\n                </div>\n                <button onClick={this.Mint}>Mint</button>\n          </div>\n      </div>)\n    ;\n    }\n}\n\nexport default MetaMintPage;\n","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/NavBar.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/DisplayMintPage.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/PurchaseNFT.js",["142"],"import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\"\n\nconst Purchase = (props) => {\n  const [status, setStatus] = useState(\"Not Started\")\n  const buy = async () => {\n    //let metaID = parseInt(document.getElementById(\"acctNftIDMeta\").value)\n    //let price = document.getElementById(\"acctNftPrice\").value\n    console.log(props)\n    const encoded = await fcl\n      .send([\n        fcl.transaction`\n        import WildNFT,WildCoin,Marketplace from 0xProfile\n\n// This transaction uses the signer's tokens to purchase an NFT\n// from the Sale collection of the seller account.\ntransaction(sellerAcct: Address, nftID: UInt64, tokenAmount: UFix64) {\n\n  // reference to the buyer's NFT collection where they\n  // will store the bought NFT\n  let collectionRef: &AnyResource{WildNFT.NFTReceiver}\n\n  // Vault that will hold the tokens that will be used to\n  // but the NFT\n  let temporaryVault: @WildCoin.Vault\n\n  prepare(acct: AuthAccount) {\n\n    // get the references to the buyer's fungible token Vault\n    // and NFT Collection Receiver\n    self.collectionRef = acct.borrow<&AnyResource{WildNFT.NFTReceiver}>(from: /storage/WildNFTCollection)\n        ?? panic(\"Could not borrow reference to the signer's nft collection\")\n\n    let vaultRef = acct.borrow<&WildCoin.Vault>(from: /storage/MainVault)\n        ?? panic(\"Could not borrow reference to the signer's vault\")\n\n    // withdraw tokens from the buyers Vault\n    self.temporaryVault <- vaultRef.withdraw(amount: tokenAmount)\n  }\n\n  execute {\n    // get the read-only account storage of the seller\n    let seller = getAccount(sellerAcct)\n\n    // get the reference to the seller's sale\n    let saleRef = seller.getCapability<&AnyResource{Marketplace.SalePublic}>(/public/NFTSale)\n        .borrow()\n        ?? panic(\"could not borrow reference to the seller's sale\")\n\n    // purchase the NFT the the seller is selling, giving them the reference\n    // to your NFT collection and giving them the tokens to buy it\n    saleRef.purchase(tokenID: nftID,\n        recipient: self.collectionRef,\n        buyTokens: <-self.temporaryVault)\n\n  }\n}\n\n      `,\n      fcl.proposer(fcl.authz),\n      fcl.authorizations([fcl.authz]),\n      fcl.payer(fcl.authz),\n      fcl.limit(50),\n      fcl.args( \n        [   fcl.arg(props.sellerAcct, t.Address),\n            fcl.arg(parseInt(props.nftID), t.UInt64),\n            fcl.arg(props.tokenAmount, t.UFix64)] )\n    ]\n    )\n    setStatus(\"Transaction Sent, Waiting for Confirmation\")\n    const decoded = await fcl.decode(encoded)\n    const unsub = fcl.tx(decoded).subscribe(transaction => {\n      if (fcl.tx.isSealed(transaction)) {\n        setStatus(\"Transaction Confirmed: Is Sealed\")\n        unsub()\n      }\n    })\n    console.log(decoded)\n\n  };\n  return (\n    <button className=\"btn-primary\" onClick={buy}>Buy</button>     \n  );\n};\n\nexport default Purchase;","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/TokenDataMarketSell.js",["143"],"import React, { useEffect, useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport defaultLogo from \"../../assets/img/WildChainImgs/WildChain-logo-long.png\";\n\nconst TokenDataMarketSell = (props) => {\n  const [nftInfo, setNftInfo] = useState(null)\n\n  // Using this function for displaying ipfs content\n  function showImg(s) {\n    let arr = s.split(\"ipfs://\");\n    //console.log(arr);\n    if(s.split(\"ipfs://\").length === 2){\n      let link = \"https://ipfs.io/ipfs/\"+arr[1];\n      //console.log(link);\n      return(\n          <img id=\"gridIcon\" src={link} alt=\"Giraffe\"></img>\n      )\n    }\n  }\n\n  const fetchTokenData = async () => {\n    let testAddr = props.account\n    //console.log(\"Prop ID: \" + props.nftID)\n    let testID = parseInt(props.nftID)\n    try {\n    const encoded = await fcl\n      .send([\n        fcl.script`\n        import Marketplace from 0xProfile\n\n        pub fun main(account: Address, nftId: UInt64) : {String : String} {\n          // Account that owns the NFT. \n          // In this case, this is the same account as the one that minted the NFT and deployed the contract.\n          let nftOwner = getAccount(account)\n          log(\"NFT Owner\")\n          // Simply borrows all capabilities that are available by access levels as defined by the contract\n          let capability = nftOwner.getCapability(/public/NFTSale)\n      \n          // Pull out the \"borrow()\" capability to get the script to borrow from the deployed contract\n          let receiverRef = capability.borrow<&{Marketplace.SalePublic}>()\n              ?? panic(\"Could not borrow the receiver reference\")\n      \n          // At this point, we can use any functions available by capabilities as defined by the contract\n          // Thus, call the getMetadata function.\n          // For the sake of this test, just getting metadata for the NFT with id 1.\n          return receiverRef.getMetadata(id: nftId)\n      }       \n      `,\n      fcl.args( \n        [fcl.arg(testAddr, t.Address),\n        fcl.arg(testID, t.UInt64)] )\n      ])\n    //console.log(\"Data Type: \" + typeof(fcl.authz()))\n    //console.log(fcl.authz().addr)\n    //let testVal = await fcl.authz()\n    //console.log(\"TestVal: \" + await testVal.addr)\n    const decoded = await fcl.decode(encoded)\n    //console.log(\"Decode: \" + decoded)\n    setNftInfo(decoded)\n    //console.log(\"NFT Info: \" + nftInfo)\n    //console.log(\"NFT Info: \" + nftInfo[\"uri\"])\n    //console.log(nftInfo)\n    } catch (error) {\n      console.log(\"NFT not found\")\n    }    \n  };\n\n  useEffect(() => {\n      fetchTokenData();\n  }, [props.account,props.nftID]);\n\n  if(nftInfo != null){\n  return (\n    <div className=\"token-data\">\n      {showImg(nftInfo[\"uri\"])}\n    </div>\n  );\n  }\n  else return (\n    <img id=\"gridIcon\" src={defaultLogo} alt=\"NFT Sold\"></img>\n  )\n};\n\nexport default TokenDataMarketSell;","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/Footer.js",["144"],"import React from 'react'; \nimport {Link} from 'react-router-dom';\n\nfunction Footer() {\n    return(\n    <div class=\"footer\">\n        <p>Footer</p>\n    </div>\n    )\n}\n\nexport default Footer;","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/components/ProfileBar.js",["145"],"import React from 'react';\nimport {Link} from 'react-router-dom';\nimport AuthCluster from '../../AuthCluster';\n\nfunction ProfileBar() {\n    return(\n        <aside>\n            <AuthCluster />\n        </aside>\n    )\n}\n\nexport default ProfileBar;","/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/SanDiegoZoo.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/BronxZoo.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/ElmwoodParkZoo.js",[],"/Users/minh/Desktop/TestSite/wc-prototype/src/pages/zoopages/OaklandZoo.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":2,"column":26,"nodeType":"152","messageId":"153","endLine":2,"endColumn":32},{"ruleId":"150","severity":1,"message":"154","line":2,"column":34,"nodeType":"152","messageId":"153","endLine":2,"endColumn":40},{"ruleId":"150","severity":1,"message":"155","line":2,"column":49,"nodeType":"152","messageId":"153","endLine":2,"endColumn":53},{"ruleId":"150","severity":1,"message":"156","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":25},{"ruleId":"157","severity":1,"message":"158","line":24,"column":7,"nodeType":"159","messageId":"160","endLine":35,"endColumn":8},{"ruleId":"150","severity":1,"message":"161","line":12,"column":14,"nodeType":"152","messageId":"153","endLine":12,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":61,"column":16,"nodeType":"164","messageId":"165","endLine":61,"endColumn":18},{"ruleId":"150","severity":1,"message":"166","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"150","severity":1,"message":"156","line":1,"column":28,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"167","line":10,"column":5,"nodeType":"152","messageId":"153","endLine":10,"endColumn":13},{"ruleId":"157","severity":1,"message":"158","line":107,"column":9,"nodeType":"159","messageId":"160","endLine":168,"endColumn":10},{"ruleId":"150","severity":1,"message":"168","line":6,"column":10,"nodeType":"152","messageId":"153","endLine":6,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":71,"column":6,"nodeType":"171","endLine":71,"endColumn":33,"suggestions":"172"},{"ruleId":"150","severity":1,"message":"155","line":2,"column":9,"nodeType":"152","messageId":"153","endLine":2,"endColumn":13},{"ruleId":"150","severity":1,"message":"155","line":2,"column":9,"nodeType":"152","messageId":"153","endLine":2,"endColumn":13},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'useState' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'handleClick' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'stateArr' is assigned a value but never used.","'status' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchTokenData'. Either include it or remove the dependency array.","ArrayExpression",["175"],"no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},"Update the dependencies array to be: [fetchTokenData, props.account, props.nftID]",{"range":"178","text":"179"},[2597,2624],"[fetchTokenData, props.account, props.nftID]"]